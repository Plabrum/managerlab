name: Deploy Application (Simple)

on:
  workflow_call:
    inputs:
      ecr_repository_url:
        description: "ECR repository URL"
        required: false
        type: string
      lambda_function_name:
        description: "Lambda function name"
        required: false
        type: string
      secret_env:
        description: "Application secrets from AWS Secrets Manager"
        required: false
        type: string

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: manageros-lambda-api

jobs:
  deploy:
    name: Deploy to Lambda
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.OIDC_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get ECR image URI
        id: ecr
        run: |
          if [ -n "${{ inputs.ecr_repository_url }}" ]; then
            IMAGE_URI="${{ inputs.ecr_repository_url }}:latest"
          else
            AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
            IMAGE_URI="${AWS_ACCOUNT_ID}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:latest"
          fi
          echo "image_uri=${IMAGE_URI}" >> $GITHUB_OUTPUT

      - name: Fetch secrets and deploy to Lambda
        run: |
          echo "Deploying ${{ steps.ecr.outputs.image_uri }} to ${{ inputs.lambda_function_name }}"

          # Get secrets from Secrets Manager
          SECRETS_ARN="arn:aws:secretsmanager:us-east-1:476114141928:secret:manageros-production-app-secrets-v2-upy1xR"
          SECRETS_JSON=$(aws secretsmanager get-secret-value --secret-id "$SECRETS_ARN" --query 'SecretString' --output text)

          # Parse secrets and build environment variables
          GOOGLE_CLIENT_ID=$(echo "$SECRETS_JSON" | jq -r '.GOOGLE_CLIENT_ID')
          GOOGLE_CLIENT_SECRET=$(echo "$SECRETS_JSON" | jq -r '.GOOGLE_CLIENT_SECRET')
          GOOGLE_REDIRECT_URI=$(echo "$SECRETS_JSON" | jq -r '.GOOGLE_REDIRECT_URI')
          SESSION_COOKIE_DOMAIN=$(echo "$SECRETS_JSON" | jq -r '.SESSION_COOKIE_DOMAIN')
          SUCCESS_REDIRECT_URL=$(echo "$SECRETS_JSON" | jq -r '.SUCCESS_REDIRECT_URL')
          FRONTEND_ORIGIN=$(echo "$SECRETS_JSON" | jq -r '.FRONTEND_ORIGIN')

          # Update function code
          aws lambda update-function-code \
            --function-name ${{ inputs.lambda_function_name }} \
            --image-uri ${{ steps.ecr.outputs.image_uri }}

          # Wait for code update to complete
          aws lambda wait function-updated \
            --function-name ${{ inputs.lambda_function_name }}

          # Update environment variables with secrets (using shorthand syntax)
          aws lambda update-function-configuration \
            --function-name ${{ inputs.lambda_function_name }} \
            --environment Variables="{ENV=production,DEBUG=false,S3_BUCKET=manageros-storage-production-d46877ed,DB_ENDPOINT=manageros-production-aurora.cluster-c3ggq820u15n.us-east-1.rds.amazonaws.com,GOOGLE_CLIENT_ID=$GOOGLE_CLIENT_ID,GOOGLE_CLIENT_SECRET=$GOOGLE_CLIENT_SECRET,GOOGLE_REDIRECT_URI=$GOOGLE_REDIRECT_URI,SESSION_COOKIE_DOMAIN=$SESSION_COOKIE_DOMAIN,SUCCESS_REDIRECT_URL=$SUCCESS_REDIRECT_URL,FRONTEND_ORIGIN=$FRONTEND_ORIGIN}"

      - name: Wait for deployment
        run: |
          echo "Waiting for deployment to complete..."
          aws lambda wait function-updated \
            --function-name ${{ inputs.lambda_function_name }}
          echo "Deployment complete!"
