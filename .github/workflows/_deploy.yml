name: Deploy Application to ECS

on:
  workflow_call:
    inputs:
      ecr_repository_url:
        description: "ECR repository URL"
        required: false
        type: string
      ecs_cluster_name:
        description: "ECS cluster name"
        required: true
        type: string
      ecs_service_name:
        description: "ECS service name"
        required: true
        type: string

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: manageros-lambda-api

jobs:
  deploy:
    name: Deploy to ECS Fargate
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.OIDC_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get ECR image URI
        id: ecr
        run: |
          if [ -n "${{ inputs.ecr_repository_url }}" ]; then
            IMAGE_URI="${{ inputs.ecr_repository_url }}:latest"
          else
            AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
            IMAGE_URI="${AWS_ACCOUNT_ID}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:latest"
          fi
          echo "image_uri=${IMAGE_URI}" >> $GITHUB_OUTPUT
          echo "Deploying image: ${IMAGE_URI}"

      - name: Force new ECS deployment
        run: |
          echo "üöÄ Forcing new deployment of ${{ inputs.ecs_service_name }}..."
          echo "New tasks will pull the latest image: ${{ steps.ecr.outputs.image_uri }}"
          aws ecs update-service \
            --cluster ${{ inputs.ecs_cluster_name }} \
            --service ${{ inputs.ecs_service_name }} \
            --force-new-deployment

      - name: Wait for deployment to complete
        run: |
          echo "‚è≥ Waiting for ECS service to stabilize..."
          aws ecs wait services-stable \
            --cluster ${{ inputs.ecs_cluster_name }} \
            --services ${{ inputs.ecs_service_name }}
          echo "‚úÖ Deployment complete!"

      - name: Get deployment status
        run: |
          echo "üìä Final deployment status:"
          aws ecs describe-services \
            --cluster ${{ inputs.ecs_cluster_name }} \
            --services ${{ inputs.ecs_service_name }} \
            --query 'services[0].{Status:status,Running:runningCount,Desired:desiredCount,Pending:pendingCount}' \
            --output table
