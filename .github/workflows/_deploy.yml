name: Deploy Application to ECS

on:
  workflow_call:
    inputs:
      ecr_repository_url:
        description: "ECR repository URL"
        required: false
        type: string
      ecs_cluster_name:
        description: "ECS cluster name"
        required: true
        type: string
      ecs_service_name:
        description: "ECS service name"
        required: true
        type: string
      secret_env:
        description: "Application secrets from AWS Secrets Manager"
        required: false
        type: string

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: manageros-lambda-api

jobs:
  deploy:
    name: Deploy to ECS Fargate
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.OIDC_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get ECR image URI
        id: ecr
        run: |
          if [ -n "${{ inputs.ecr_repository_url }}" ]; then
            IMAGE_URI="${{ inputs.ecr_repository_url }}:latest"
          else
            AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
            IMAGE_URI="${AWS_ACCOUNT_ID}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:latest"
          fi
          echo "image_uri=${IMAGE_URI}" >> $GITHUB_OUTPUT
          echo "Deploying image: ${IMAGE_URI}"

      - name: Get current task definition
        id: current_task
        run: |
          echo "📋 Getting current task definition..."
          TASK_DEF_ARN=$(aws ecs describe-services \
            --cluster ${{ inputs.ecs_cluster_name }} \
            --services ${{ inputs.ecs_service_name }} \
            --query 'services[0].taskDefinition' \
            --output text)

          echo "Current task definition: ${TASK_DEF_ARN}"
          echo "task_def_arn=${TASK_DEF_ARN}" >> $GITHUB_OUTPUT

      - name: Register new task definition with updated image
        id: new_task
        run: |
          echo "📝 Registering new task definition with image ${{ steps.ecr.outputs.image_uri }}..."

          # Get current task definition
          CURRENT_TASK_DEF=$(aws ecs describe-task-definition \
            --task-definition ${{ steps.current_task.outputs.task_def_arn }} \
            --query 'taskDefinition')

          # Create new task definition with updated image
          NEW_TASK_DEF=$(echo "$CURRENT_TASK_DEF" | jq --arg IMAGE "${{ steps.ecr.outputs.image_uri }}" '
            .containerDefinitions[0].image = $IMAGE |
            del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)
          ')

          # Register new task definition
          NEW_TASK_ARN=$(echo "$NEW_TASK_DEF" | jq -r '{
            family: .family,
            taskRoleArn: .taskRoleArn,
            executionRoleArn: .executionRoleArn,
            networkMode: .networkMode,
            containerDefinitions: .containerDefinitions,
            requiresCompatibilities: ["FARGATE"],
            cpu: .cpu,
            memory: .memory
          }' | aws ecs register-task-definition --cli-input-json file:///dev/stdin --query 'taskDefinition.taskDefinitionArn' --output text)

          echo "New task definition: ${NEW_TASK_ARN}"
          echo "new_task_arn=${NEW_TASK_ARN}" >> $GITHUB_OUTPUT

      - name: Update ECS service
        run: |
          echo "🚀 Updating ECS service ${{ inputs.ecs_service_name }} with new task definition..."
          aws ecs update-service \
            --cluster ${{ inputs.ecs_cluster_name }} \
            --service ${{ inputs.ecs_service_name }} \
            --task-definition ${{ steps.new_task.outputs.new_task_arn }} \
            --force-new-deployment

      - name: Wait for deployment to complete
        run: |
          echo "⏳ Waiting for ECS service to stabilize..."
          aws ecs wait services-stable \
            --cluster ${{ inputs.ecs_cluster_name }} \
            --services ${{ inputs.ecs_service_name }}
          echo "✅ Deployment complete!"

      - name: Get deployment status
        run: |
          echo "📊 Final deployment status:"
          aws ecs describe-services \
            --cluster ${{ inputs.ecs_cluster_name }} \
            --services ${{ inputs.ecs_service_name }} \
            --query 'services[0].{Status:status,Running:runningCount,Desired:desiredCount,Pending:pendingCount}' \
            --output table
