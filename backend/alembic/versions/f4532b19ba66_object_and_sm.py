"""object and sm

Revision ID: f4532b19ba66
Revises: 19f7d563fb31
Create Date: 2025-09-25 14:12:33.566680

"""

from collections.abc import Sequence

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "f4532b19ba66"
down_revision: str | Sequence[str] | None = "19f7d563fb31"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "teams",
        sa.Column("name", sa.Text(), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.drop_index(
        op.f("ix_state_transition_logs_object_id"),
        table_name="state_transition_logs",
        if_exists=True,
    )
    op.drop_index(
        op.f("ix_state_transition_logs_object_type"),
        table_name="state_transition_logs",
        if_exists=True,
    )
    op.drop_index(
        op.f("ix_state_transition_logs_user_id"),
        table_name="state_transition_logs",
        if_exists=True,
    )
    op.drop_table("state_transition_logs", if_exists=True)
    op.drop_index(op.f("ix_action_logs_action_name"), table_name="action_logs", if_exists=True)
    op.drop_index(op.f("ix_action_logs_idempotency_key"), table_name="action_logs", if_exists=True)
    op.drop_index(op.f("ix_action_logs_object_id"), table_name="action_logs", if_exists=True)
    op.drop_index(op.f("ix_action_logs_object_type"), table_name="action_logs", if_exists=True)
    op.drop_index(op.f("ix_action_logs_user_id"), table_name="action_logs", if_exists=True)
    op.drop_table("action_logs", if_exists=True)
    op.drop_index(op.f("ix_invoices_current_state"), table_name="invoices", if_exists=True)
    op.drop_index(op.f("ix_invoices_object_type"), table_name="invoices", if_exists=True)
    op.drop_table("invoices", if_exists=True)
    op.add_column(
        "users",
        sa.Column("state", sa.Text(), server_default="NEEDS_TEAM", nullable=False),
    )
    op.create_index(op.f("ix_users_state"), "users", ["state"], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_users_state"), table_name="users")
    op.drop_column("users", "state")
    op.create_table(
        "invoices",
        sa.Column("invoice_number", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("customer_name", sa.VARCHAR(length=255), autoincrement=False, nullable=False),
        sa.Column(
            "customer_email",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("posting_date", sa.DATE(), autoincrement=False, nullable=False),
        sa.Column("due_date", sa.DATE(), autoincrement=False, nullable=False),
        sa.Column(
            "amount_due",
            sa.NUMERIC(precision=10, scale=2),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "amount_paid",
            sa.NUMERIC(precision=10, scale=2),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("description", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("notes", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column(
            "object_version",
            sa.INTEGER(),
            server_default=sa.text("1"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("current_state", sa.VARCHAR(length=100), autoincrement=False, nullable=False),
        sa.Column("object_type", sa.VARCHAR(length=50), autoincrement=False, nullable=False),
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("invoices_pkey")),
        sa.UniqueConstraint(
            "invoice_number",
            name=op.f("invoices_invoice_number_key"),
            postgresql_include=[],
            postgresql_nulls_not_distinct=False,
        ),
    )
    op.create_index(op.f("ix_invoices_object_type"), "invoices", ["object_type"], unique=False)
    op.create_index(op.f("ix_invoices_current_state"), "invoices", ["current_state"], unique=False)
    op.create_table(
        "action_logs",
        sa.Column("object_type", sa.VARCHAR(length=50), autoincrement=False, nullable=False),
        sa.Column("object_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("action_name", sa.VARCHAR(length=100), autoincrement=False, nullable=False),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("object_version", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "idempotency_key",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "context",
            postgresql.JSON(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "result",
            postgresql.JSON(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("error_message", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("success", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column("execution_time_ms", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("action_logs_pkey")),
    )
    op.create_index(op.f("ix_action_logs_user_id"), "action_logs", ["user_id"], unique=False)
    op.create_index(op.f("ix_action_logs_object_type"), "action_logs", ["object_type"], unique=False)
    op.create_index(op.f("ix_action_logs_object_id"), "action_logs", ["object_id"], unique=False)
    op.create_index(
        op.f("ix_action_logs_idempotency_key"),
        "action_logs",
        ["idempotency_key"],
        unique=False,
    )
    op.create_index(op.f("ix_action_logs_action_name"), "action_logs", ["action_name"], unique=False)
    op.create_table(
        "state_transition_logs",
        sa.Column("object_type", sa.VARCHAR(length=50), autoincrement=False, nullable=False),
        sa.Column("object_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("from_state", sa.VARCHAR(length=100), autoincrement=False, nullable=True),
        sa.Column("to_state", sa.VARCHAR(length=100), autoincrement=False, nullable=False),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "context",
            postgresql.JSON(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("error_message", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("success", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("state_transition_logs_pkey")),
    )
    op.create_index(
        op.f("ix_state_transition_logs_user_id"),
        "state_transition_logs",
        ["user_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_transition_logs_object_type"),
        "state_transition_logs",
        ["object_type"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_transition_logs_object_id"),
        "state_transition_logs",
        ["object_id"],
        unique=False,
    )
    op.drop_table("teams")
    # ### end Alembic commands ###
