"""add deleted_at to dashboard

Revision ID: 39b4f471b02b
Revises: 70595ac371c4
Create Date: 2025-10-20 15:56:57.835022

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from alembic_utils.pg_policy import PGPolicy
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "39b4f471b02b"
down_revision: Union[str, Sequence[str], None] = "70595ac371c4"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("saq_jobs_status_queue_group_key_idx"), table_name="saq_jobs")
    op.drop_index(
        op.f("saq_jobs_status_queue_priority_scheduled_idx"), table_name="saq_jobs"
    )
    op.drop_table("saq_jobs")
    op.drop_index(op.f("saq_stats_expire_at_idx"), table_name="saq_stats")
    op.drop_index(op.f("saq_stats_queue_key_idx"), table_name="saq_stats")
    op.drop_table("saq_stats")
    op.drop_table("saq_versions")
    op.add_column(
        "dashboards", sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True)
    )
    op.create_index(
        op.f("ix_dashboards_deleted_at"), "dashboards", ["deleted_at"], unique=False
    )
    public_invoices_dual_scope_policy = PGPolicy(
        schema="public",
        signature="dual_scope_policy",
        on_entity="public.invoices",
        definition="AS PERMISSIVE\n                            FOR ALL\n                            USING (\n                                (team_id = current_setting('app.team_id', true)::int)\n                                OR (campaign_id = current_setting('app.campaign_id', true)::int)\n                                OR (current_setting('app.team_id', true) IS NULL\n                                    AND current_setting('app.campaign_id', true) IS NULL)\n                            )",
    )
    op.create_entity(public_invoices_dual_scope_policy)

    public_posts_dual_scope_policy = PGPolicy(
        schema="public",
        signature="dual_scope_policy",
        on_entity="public.posts",
        definition="AS PERMISSIVE\n                            FOR ALL\n                            USING (\n                                (team_id = current_setting('app.team_id', true)::int)\n                                OR (campaign_id = current_setting('app.campaign_id', true)::int)\n                                OR (current_setting('app.team_id', true) IS NULL\n                                    AND current_setting('app.campaign_id', true) IS NULL)\n                            )",
    )
    op.create_entity(public_posts_dual_scope_policy)

    public_roster_team_scope_policy = PGPolicy(
        schema="public",
        signature="team_scope_policy",
        on_entity="public.roster",
        definition="AS PERMISSIVE\n                            FOR ALL\n                            USING (\n                                team_id = current_setting('app.team_id', true)::int\n                                OR current_setting('app.team_id', true) IS NULL\n                            )",
    )
    op.create_entity(public_roster_team_scope_policy)

    public_campaigns_team_scope_policy = PGPolicy(
        schema="public",
        signature="team_scope_policy",
        on_entity="public.campaigns",
        definition="AS PERMISSIVE\n                            FOR ALL\n                            USING (\n                                team_id = current_setting('app.team_id', true)::int\n                                OR current_setting('app.team_id', true) IS NULL\n                            )",
    )
    op.create_entity(public_campaigns_team_scope_policy)

    public_media_dual_scope_policy = PGPolicy(
        schema="public",
        signature="dual_scope_policy",
        on_entity="public.media",
        definition="AS PERMISSIVE\n                            FOR ALL\n                            USING (\n                                (team_id = current_setting('app.team_id', true)::int)\n                                OR (campaign_id = current_setting('app.campaign_id', true)::int)\n                                OR (current_setting('app.team_id', true) IS NULL\n                                    AND current_setting('app.campaign_id', true) IS NULL)\n                            )",
    )
    op.create_entity(public_media_dual_scope_policy)

    public_brand_contacts_team_scope_policy = PGPolicy(
        schema="public",
        signature="team_scope_policy",
        on_entity="public.brand_contacts",
        definition="AS PERMISSIVE\n                            FOR ALL\n                            USING (\n                                team_id = current_setting('app.team_id', true)::int\n                                OR current_setting('app.team_id', true) IS NULL\n                            )",
    )
    op.create_entity(public_brand_contacts_team_scope_policy)

    public_brands_team_scope_policy = PGPolicy(
        schema="public",
        signature="team_scope_policy",
        on_entity="public.brands",
        definition="AS PERMISSIVE\n                            FOR ALL\n                            USING (\n                                team_id = current_setting('app.team_id', true)::int\n                                OR current_setting('app.team_id', true) IS NULL\n                            )",
    )
    op.create_entity(public_brands_team_scope_policy)

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    public_brands_team_scope_policy = PGPolicy(
        schema="public",
        signature="team_scope_policy",
        on_entity="public.brands",
        definition="AS PERMISSIVE\n                            FOR ALL\n                            USING (\n                                team_id = current_setting('app.team_id', true)::int\n                                OR current_setting('app.team_id', true) IS NULL\n                            )",
    )
    op.drop_entity(public_brands_team_scope_policy)

    public_brand_contacts_team_scope_policy = PGPolicy(
        schema="public",
        signature="team_scope_policy",
        on_entity="public.brand_contacts",
        definition="AS PERMISSIVE\n                            FOR ALL\n                            USING (\n                                team_id = current_setting('app.team_id', true)::int\n                                OR current_setting('app.team_id', true) IS NULL\n                            )",
    )
    op.drop_entity(public_brand_contacts_team_scope_policy)

    public_media_dual_scope_policy = PGPolicy(
        schema="public",
        signature="dual_scope_policy",
        on_entity="public.media",
        definition="AS PERMISSIVE\n                            FOR ALL\n                            USING (\n                                (team_id = current_setting('app.team_id', true)::int)\n                                OR (campaign_id = current_setting('app.campaign_id', true)::int)\n                                OR (current_setting('app.team_id', true) IS NULL\n                                    AND current_setting('app.campaign_id', true) IS NULL)\n                            )",
    )
    op.drop_entity(public_media_dual_scope_policy)

    public_campaigns_team_scope_policy = PGPolicy(
        schema="public",
        signature="team_scope_policy",
        on_entity="public.campaigns",
        definition="AS PERMISSIVE\n                            FOR ALL\n                            USING (\n                                team_id = current_setting('app.team_id', true)::int\n                                OR current_setting('app.team_id', true) IS NULL\n                            )",
    )
    op.drop_entity(public_campaigns_team_scope_policy)

    public_roster_team_scope_policy = PGPolicy(
        schema="public",
        signature="team_scope_policy",
        on_entity="public.roster",
        definition="AS PERMISSIVE\n                            FOR ALL\n                            USING (\n                                team_id = current_setting('app.team_id', true)::int\n                                OR current_setting('app.team_id', true) IS NULL\n                            )",
    )
    op.drop_entity(public_roster_team_scope_policy)

    public_posts_dual_scope_policy = PGPolicy(
        schema="public",
        signature="dual_scope_policy",
        on_entity="public.posts",
        definition="AS PERMISSIVE\n                            FOR ALL\n                            USING (\n                                (team_id = current_setting('app.team_id', true)::int)\n                                OR (campaign_id = current_setting('app.campaign_id', true)::int)\n                                OR (current_setting('app.team_id', true) IS NULL\n                                    AND current_setting('app.campaign_id', true) IS NULL)\n                            )",
    )
    op.drop_entity(public_posts_dual_scope_policy)

    public_invoices_dual_scope_policy = PGPolicy(
        schema="public",
        signature="dual_scope_policy",
        on_entity="public.invoices",
        definition="AS PERMISSIVE\n                            FOR ALL\n                            USING (\n                                (team_id = current_setting('app.team_id', true)::int)\n                                OR (campaign_id = current_setting('app.campaign_id', true)::int)\n                                OR (current_setting('app.team_id', true) IS NULL\n                                    AND current_setting('app.campaign_id', true) IS NULL)\n                            )",
    )
    op.drop_entity(public_invoices_dual_scope_policy)

    op.drop_index(op.f("ix_dashboards_deleted_at"), table_name="dashboards")
    op.drop_column("dashboards", "deleted_at")
    op.create_table(
        "saq_versions",
        sa.Column("version", sa.INTEGER(), autoincrement=False, nullable=True),
    )
    op.create_table(
        "saq_stats",
        sa.Column("worker_id", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column(
            "stats",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("expire_at", sa.BIGINT(), autoincrement=False, nullable=True),
        sa.Column(
            "metadata",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("queue_key", sa.TEXT(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("worker_id", name=op.f("saq_stats_pkey")),
    )
    op.create_index(
        op.f("saq_stats_queue_key_idx"), "saq_stats", ["queue_key"], unique=False
    )
    op.create_index(
        op.f("saq_stats_expire_at_idx"), "saq_stats", ["expire_at"], unique=False
    )
    op.create_table(
        "saq_jobs",
        sa.Column("key", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("lock_key", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("job", postgresql.BYTEA(), autoincrement=False, nullable=False),
        sa.Column("queue", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("status", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column(
            "priority",
            sa.SMALLINT(),
            server_default=sa.text("0"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("group_key", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column(
            "scheduled",
            sa.BIGINT(),
            server_default=sa.text("EXTRACT(epoch FROM now())"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("expire_at", sa.BIGINT(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("key", name=op.f("saq_jobs_pkey")),
    )
    op.create_index(
        op.f("saq_jobs_status_queue_priority_scheduled_idx"),
        "saq_jobs",
        ["status", "queue", "priority", "scheduled"],
        unique=False,
    )
    op.create_index(
        op.f("saq_jobs_status_queue_group_key_idx"),
        "saq_jobs",
        ["status", "queue", "group_key"],
        unique=False,
    )
    # ### end Alembic commands ###
