"""add deleted_at to dashboard

Revision ID: 39b4f471b02b
Revises: 70595ac371c4
Create Date: 2025-10-20 15:56:57.835022

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from alembic_utils.pg_policy import PGPolicy

# revision identifiers, used by Alembic.
revision: str = "39b4f471b02b"
down_revision: Union[str, Sequence[str], None] = "70595ac371c4"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "dashboards", sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True)
    )
    op.create_index(
        op.f("ix_dashboards_deleted_at"), "dashboards", ["deleted_at"], unique=False
    )
    public_invoices_dual_scope_policy = PGPolicy(
        schema="public",
        signature="dual_scope_policy",
        on_entity="public.invoices",
        definition="AS PERMISSIVE\n                            FOR ALL\n                            USING (\n                                (team_id = current_setting('app.team_id', true)::int)\n                                OR (campaign_id = current_setting('app.campaign_id', true)::int)\n                                OR (current_setting('app.team_id', true) IS NULL\n                                    AND current_setting('app.campaign_id', true) IS NULL)\n                            )",
    )
    op.create_entity(public_invoices_dual_scope_policy)

    public_posts_dual_scope_policy = PGPolicy(
        schema="public",
        signature="dual_scope_policy",
        on_entity="public.posts",
        definition="AS PERMISSIVE\n                            FOR ALL\n                            USING (\n                                (team_id = current_setting('app.team_id', true)::int)\n                                OR (campaign_id = current_setting('app.campaign_id', true)::int)\n                                OR (current_setting('app.team_id', true) IS NULL\n                                    AND current_setting('app.campaign_id', true) IS NULL)\n                            )",
    )
    op.create_entity(public_posts_dual_scope_policy)

    public_roster_team_scope_policy = PGPolicy(
        schema="public",
        signature="team_scope_policy",
        on_entity="public.roster",
        definition="AS PERMISSIVE\n                            FOR ALL\n                            USING (\n                                team_id = current_setting('app.team_id', true)::int\n                                OR current_setting('app.team_id', true) IS NULL\n                            )",
    )
    op.create_entity(public_roster_team_scope_policy)

    public_campaigns_team_scope_policy = PGPolicy(
        schema="public",
        signature="team_scope_policy",
        on_entity="public.campaigns",
        definition="AS PERMISSIVE\n                            FOR ALL\n                            USING (\n                                team_id = current_setting('app.team_id', true)::int\n                                OR current_setting('app.team_id', true) IS NULL\n                            )",
    )
    op.create_entity(public_campaigns_team_scope_policy)

    public_media_dual_scope_policy = PGPolicy(
        schema="public",
        signature="dual_scope_policy",
        on_entity="public.media",
        definition="AS PERMISSIVE\n                            FOR ALL\n                            USING (\n                                (team_id = current_setting('app.team_id', true)::int)\n                                OR (campaign_id = current_setting('app.campaign_id', true)::int)\n                                OR (current_setting('app.team_id', true) IS NULL\n                                    AND current_setting('app.campaign_id', true) IS NULL)\n                            )",
    )
    op.create_entity(public_media_dual_scope_policy)

    public_brand_contacts_team_scope_policy = PGPolicy(
        schema="public",
        signature="team_scope_policy",
        on_entity="public.brand_contacts",
        definition="AS PERMISSIVE\n                            FOR ALL\n                            USING (\n                                team_id = current_setting('app.team_id', true)::int\n                                OR current_setting('app.team_id', true) IS NULL\n                            )",
    )
    op.create_entity(public_brand_contacts_team_scope_policy)

    public_brands_team_scope_policy = PGPolicy(
        schema="public",
        signature="team_scope_policy",
        on_entity="public.brands",
        definition="AS PERMISSIVE\n                            FOR ALL\n                            USING (\n                                team_id = current_setting('app.team_id', true)::int\n                                OR current_setting('app.team_id', true) IS NULL\n                            )",
    )
    op.create_entity(public_brands_team_scope_policy)

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    public_brands_team_scope_policy = PGPolicy(
        schema="public",
        signature="team_scope_policy",
        on_entity="public.brands",
        definition="AS PERMISSIVE\n                            FOR ALL\n                            USING (\n                                team_id = current_setting('app.team_id', true)::int\n                                OR current_setting('app.team_id', true) IS NULL\n                            )",
    )
    op.drop_entity(public_brands_team_scope_policy)

    public_brand_contacts_team_scope_policy = PGPolicy(
        schema="public",
        signature="team_scope_policy",
        on_entity="public.brand_contacts",
        definition="AS PERMISSIVE\n                            FOR ALL\n                            USING (\n                                team_id = current_setting('app.team_id', true)::int\n                                OR current_setting('app.team_id', true) IS NULL\n                            )",
    )
    op.drop_entity(public_brand_contacts_team_scope_policy)

    public_media_dual_scope_policy = PGPolicy(
        schema="public",
        signature="dual_scope_policy",
        on_entity="public.media",
        definition="AS PERMISSIVE\n                            FOR ALL\n                            USING (\n                                (team_id = current_setting('app.team_id', true)::int)\n                                OR (campaign_id = current_setting('app.campaign_id', true)::int)\n                                OR (current_setting('app.team_id', true) IS NULL\n                                    AND current_setting('app.campaign_id', true) IS NULL)\n                            )",
    )
    op.drop_entity(public_media_dual_scope_policy)

    public_campaigns_team_scope_policy = PGPolicy(
        schema="public",
        signature="team_scope_policy",
        on_entity="public.campaigns",
        definition="AS PERMISSIVE\n                            FOR ALL\n                            USING (\n                                team_id = current_setting('app.team_id', true)::int\n                                OR current_setting('app.team_id', true) IS NULL\n                            )",
    )
    op.drop_entity(public_campaigns_team_scope_policy)

    public_roster_team_scope_policy = PGPolicy(
        schema="public",
        signature="team_scope_policy",
        on_entity="public.roster",
        definition="AS PERMISSIVE\n                            FOR ALL\n                            USING (\n                                team_id = current_setting('app.team_id', true)::int\n                                OR current_setting('app.team_id', true) IS NULL\n                            )",
    )
    op.drop_entity(public_roster_team_scope_policy)

    public_posts_dual_scope_policy = PGPolicy(
        schema="public",
        signature="dual_scope_policy",
        on_entity="public.posts",
        definition="AS PERMISSIVE\n                            FOR ALL\n                            USING (\n                                (team_id = current_setting('app.team_id', true)::int)\n                                OR (campaign_id = current_setting('app.campaign_id', true)::int)\n                                OR (current_setting('app.team_id', true) IS NULL\n                                    AND current_setting('app.campaign_id', true) IS NULL)\n                            )",
    )
    op.drop_entity(public_posts_dual_scope_policy)

    public_invoices_dual_scope_policy = PGPolicy(
        schema="public",
        signature="dual_scope_policy",
        on_entity="public.invoices",
        definition="AS PERMISSIVE\n                            FOR ALL\n                            USING (\n                                (team_id = current_setting('app.team_id', true)::int)\n                                OR (campaign_id = current_setting('app.campaign_id', true)::int)\n                                OR (current_setting('app.team_id', true) IS NULL\n                                    AND current_setting('app.campaign_id', true) IS NULL)\n                            )",
    )
    op.drop_entity(public_invoices_dual_scope_policy)

    op.drop_index(op.f("ix_dashboards_deleted_at"), table_name="dashboards")
    op.drop_column("dashboards", "deleted_at")
    # ### end Alembic commands ###
