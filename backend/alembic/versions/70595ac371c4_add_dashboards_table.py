"""Add dashboards table

Revision ID: 70595ac371c4
Revises: a5c6dd4e2369
Create Date: 2025-10-17 13:08:26.667699

"""

from collections.abc import Sequence

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "70595ac371c4"
down_revision: str | Sequence[str] | None = "a5c6dd4e2369"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "dashboards",
        sa.Column("name", sa.Text(), nullable=False),
        sa.Column(
            "config",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default=sa.text("'{}'::jsonb"),
            nullable=False,
        ),
        sa.Column(
            "owner_type",
            sa.Enum("USER", "TEAM", name="dashboardownertype", native_enum=False, length=10),
            nullable=False,
        ),
        sa.Column("user_id", sa.Integer(), nullable=True),
        sa.Column("team_id", sa.Integer(), nullable=True),
        sa.Column("is_default", sa.Boolean(), server_default=sa.text("false"), nullable=False),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.CheckConstraint(
            "(owner_type = 'user' AND user_id IS NOT NULL AND team_id IS NULL) OR (owner_type = 'team' AND team_id IS NOT NULL AND user_id IS NULL)",
            name="check_owner_type_matches",
        ),
        sa.ForeignKeyConstraint(["team_id"], ["teams.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("team_id", "name", name="unique_team_dashboard_name"),
        sa.UniqueConstraint("user_id", "name", name="unique_user_dashboard_name"),
    )
    op.create_index(op.f("ix_dashboards_name"), "dashboards", ["name"], unique=False)
    op.create_index(op.f("ix_dashboards_owner_type"), "dashboards", ["owner_type"], unique=False)
    op.create_index(op.f("ix_dashboards_team_id"), "dashboards", ["team_id"], unique=False)
    op.create_index(op.f("ix_dashboards_user_id"), "dashboards", ["user_id"], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_dashboards_user_id"), table_name="dashboards")
    op.drop_index(op.f("ix_dashboards_team_id"), table_name="dashboards")
    op.drop_index(op.f("ix_dashboards_owner_type"), table_name="dashboards")
    op.drop_index(op.f("ix_dashboards_name"), table_name="dashboards")
    op.drop_table("dashboards")
    # ### end Alembic commands ###
