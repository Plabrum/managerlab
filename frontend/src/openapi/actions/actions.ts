/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * ManagerLab
 * Private schema of ManagerLab with Scalar OpenAPI docs
 * OpenAPI spec version: 0.0.1
 */
import {
  useMutation,
  useQuery,
  useSuspenseQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query';

import type {
  ActionExecutionResponse,
  ActionGroupType,
  ActionListResponse,
  ActionsActionGroupExecuteAction400,
  ActionsActionGroupExecuteActionBody,
  ActionsActionGroupListActions400,
  ActionsActionGroupObjectIdExecuteObjectAction400,
  ActionsActionGroupObjectIdExecuteObjectActionBody,
  ActionsActionGroupObjectIdListObjectActions400
} from '../managerLab.schemas';

import { customInstance } from '.././custom-instance';




/**
 * @summary ListActions
 */
export const actionsActionGroupListActions = (
    actionGroup: ActionGroupType,
 signal?: AbortSignal
) => {
      
      
      return customInstance<ActionListResponse>(
      {url: `/actions/${actionGroup}`, method: 'GET', signal
    },
      );
    }
  

export const getActionsActionGroupListActionsQueryKey = (actionGroup?: ActionGroupType,) => {
    return [`/actions/${actionGroup}`] as const;
    }

    
export const getActionsActionGroupListActionsQueryOptions = <TData = Awaited<ReturnType<typeof actionsActionGroupListActions>>, TError = ActionsActionGroupListActions400>(actionGroup: ActionGroupType, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof actionsActionGroupListActions>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getActionsActionGroupListActionsQueryKey(actionGroup);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof actionsActionGroupListActions>>> = ({ signal }) => actionsActionGroupListActions(actionGroup, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(actionGroup), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof actionsActionGroupListActions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ActionsActionGroupListActionsQueryResult = NonNullable<Awaited<ReturnType<typeof actionsActionGroupListActions>>>
export type ActionsActionGroupListActionsQueryError = ActionsActionGroupListActions400


export function useActionsActionGroupListActions<TData = Awaited<ReturnType<typeof actionsActionGroupListActions>>, TError = ActionsActionGroupListActions400>(
 actionGroup: ActionGroupType, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof actionsActionGroupListActions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof actionsActionGroupListActions>>,
          TError,
          Awaited<ReturnType<typeof actionsActionGroupListActions>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useActionsActionGroupListActions<TData = Awaited<ReturnType<typeof actionsActionGroupListActions>>, TError = ActionsActionGroupListActions400>(
 actionGroup: ActionGroupType, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof actionsActionGroupListActions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof actionsActionGroupListActions>>,
          TError,
          Awaited<ReturnType<typeof actionsActionGroupListActions>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useActionsActionGroupListActions<TData = Awaited<ReturnType<typeof actionsActionGroupListActions>>, TError = ActionsActionGroupListActions400>(
 actionGroup: ActionGroupType, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof actionsActionGroupListActions>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ListActions
 */

export function useActionsActionGroupListActions<TData = Awaited<ReturnType<typeof actionsActionGroupListActions>>, TError = ActionsActionGroupListActions400>(
 actionGroup: ActionGroupType, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof actionsActionGroupListActions>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getActionsActionGroupListActionsQueryOptions(actionGroup,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getActionsActionGroupListActionsSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof actionsActionGroupListActions>>, TError = ActionsActionGroupListActions400>(actionGroup: ActionGroupType, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof actionsActionGroupListActions>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getActionsActionGroupListActionsQueryKey(actionGroup);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof actionsActionGroupListActions>>> = ({ signal }) => actionsActionGroupListActions(actionGroup, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof actionsActionGroupListActions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ActionsActionGroupListActionsSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof actionsActionGroupListActions>>>
export type ActionsActionGroupListActionsSuspenseQueryError = ActionsActionGroupListActions400


export function useActionsActionGroupListActionsSuspense<TData = Awaited<ReturnType<typeof actionsActionGroupListActions>>, TError = ActionsActionGroupListActions400>(
 actionGroup: ActionGroupType, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof actionsActionGroupListActions>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useActionsActionGroupListActionsSuspense<TData = Awaited<ReturnType<typeof actionsActionGroupListActions>>, TError = ActionsActionGroupListActions400>(
 actionGroup: ActionGroupType, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof actionsActionGroupListActions>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useActionsActionGroupListActionsSuspense<TData = Awaited<ReturnType<typeof actionsActionGroupListActions>>, TError = ActionsActionGroupListActions400>(
 actionGroup: ActionGroupType, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof actionsActionGroupListActions>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ListActions
 */

export function useActionsActionGroupListActionsSuspense<TData = Awaited<ReturnType<typeof actionsActionGroupListActions>>, TError = ActionsActionGroupListActions400>(
 actionGroup: ActionGroupType, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof actionsActionGroupListActions>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getActionsActionGroupListActionsSuspenseQueryOptions(actionGroup,options)

  const query = useSuspenseQuery(queryOptions , queryClient) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary ExecuteAction
 */
export const actionsActionGroupExecuteAction = (
    actionGroup: ActionGroupType,
    actionsActionGroupExecuteActionBody: ActionsActionGroupExecuteActionBody,
 signal?: AbortSignal
) => {
      
      
      return customInstance<ActionExecutionResponse>(
      {url: `/actions/${actionGroup}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: actionsActionGroupExecuteActionBody, signal
    },
      );
    }
  


export const getActionsActionGroupExecuteActionMutationOptions = <TError = ActionsActionGroupExecuteAction400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof actionsActionGroupExecuteAction>>, TError,{actionGroup: ActionGroupType;data: ActionsActionGroupExecuteActionBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof actionsActionGroupExecuteAction>>, TError,{actionGroup: ActionGroupType;data: ActionsActionGroupExecuteActionBody}, TContext> => {

const mutationKey = ['actionsActionGroupExecuteAction'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof actionsActionGroupExecuteAction>>, {actionGroup: ActionGroupType;data: ActionsActionGroupExecuteActionBody}> = (props) => {
          const {actionGroup,data} = props ?? {};

          return  actionsActionGroupExecuteAction(actionGroup,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ActionsActionGroupExecuteActionMutationResult = NonNullable<Awaited<ReturnType<typeof actionsActionGroupExecuteAction>>>
    export type ActionsActionGroupExecuteActionMutationBody = ActionsActionGroupExecuteActionBody
    export type ActionsActionGroupExecuteActionMutationError = ActionsActionGroupExecuteAction400

    /**
 * @summary ExecuteAction
 */
export const useActionsActionGroupExecuteAction = <TError = ActionsActionGroupExecuteAction400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof actionsActionGroupExecuteAction>>, TError,{actionGroup: ActionGroupType;data: ActionsActionGroupExecuteActionBody}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof actionsActionGroupExecuteAction>>,
        TError,
        {actionGroup: ActionGroupType;data: ActionsActionGroupExecuteActionBody},
        TContext
      > => {

      const mutationOptions = getActionsActionGroupExecuteActionMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary ListObjectActions
 */
export const actionsActionGroupObjectIdListObjectActions = (
    actionGroup: ActionGroupType,
    objectId: string,
 signal?: AbortSignal
) => {
      
      
      return customInstance<ActionListResponse>(
      {url: `/actions/${actionGroup}/${objectId}`, method: 'GET', signal
    },
      );
    }
  

export const getActionsActionGroupObjectIdListObjectActionsQueryKey = (actionGroup?: ActionGroupType,
    objectId?: string,) => {
    return [`/actions/${actionGroup}/${objectId}`] as const;
    }

    
export const getActionsActionGroupObjectIdListObjectActionsQueryOptions = <TData = Awaited<ReturnType<typeof actionsActionGroupObjectIdListObjectActions>>, TError = ActionsActionGroupObjectIdListObjectActions400>(actionGroup: ActionGroupType,
    objectId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof actionsActionGroupObjectIdListObjectActions>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getActionsActionGroupObjectIdListObjectActionsQueryKey(actionGroup,objectId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof actionsActionGroupObjectIdListObjectActions>>> = ({ signal }) => actionsActionGroupObjectIdListObjectActions(actionGroup,objectId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(actionGroup && objectId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof actionsActionGroupObjectIdListObjectActions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ActionsActionGroupObjectIdListObjectActionsQueryResult = NonNullable<Awaited<ReturnType<typeof actionsActionGroupObjectIdListObjectActions>>>
export type ActionsActionGroupObjectIdListObjectActionsQueryError = ActionsActionGroupObjectIdListObjectActions400


export function useActionsActionGroupObjectIdListObjectActions<TData = Awaited<ReturnType<typeof actionsActionGroupObjectIdListObjectActions>>, TError = ActionsActionGroupObjectIdListObjectActions400>(
 actionGroup: ActionGroupType,
    objectId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof actionsActionGroupObjectIdListObjectActions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof actionsActionGroupObjectIdListObjectActions>>,
          TError,
          Awaited<ReturnType<typeof actionsActionGroupObjectIdListObjectActions>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useActionsActionGroupObjectIdListObjectActions<TData = Awaited<ReturnType<typeof actionsActionGroupObjectIdListObjectActions>>, TError = ActionsActionGroupObjectIdListObjectActions400>(
 actionGroup: ActionGroupType,
    objectId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof actionsActionGroupObjectIdListObjectActions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof actionsActionGroupObjectIdListObjectActions>>,
          TError,
          Awaited<ReturnType<typeof actionsActionGroupObjectIdListObjectActions>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useActionsActionGroupObjectIdListObjectActions<TData = Awaited<ReturnType<typeof actionsActionGroupObjectIdListObjectActions>>, TError = ActionsActionGroupObjectIdListObjectActions400>(
 actionGroup: ActionGroupType,
    objectId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof actionsActionGroupObjectIdListObjectActions>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ListObjectActions
 */

export function useActionsActionGroupObjectIdListObjectActions<TData = Awaited<ReturnType<typeof actionsActionGroupObjectIdListObjectActions>>, TError = ActionsActionGroupObjectIdListObjectActions400>(
 actionGroup: ActionGroupType,
    objectId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof actionsActionGroupObjectIdListObjectActions>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getActionsActionGroupObjectIdListObjectActionsQueryOptions(actionGroup,objectId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getActionsActionGroupObjectIdListObjectActionsSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof actionsActionGroupObjectIdListObjectActions>>, TError = ActionsActionGroupObjectIdListObjectActions400>(actionGroup: ActionGroupType,
    objectId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof actionsActionGroupObjectIdListObjectActions>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getActionsActionGroupObjectIdListObjectActionsQueryKey(actionGroup,objectId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof actionsActionGroupObjectIdListObjectActions>>> = ({ signal }) => actionsActionGroupObjectIdListObjectActions(actionGroup,objectId, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof actionsActionGroupObjectIdListObjectActions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ActionsActionGroupObjectIdListObjectActionsSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof actionsActionGroupObjectIdListObjectActions>>>
export type ActionsActionGroupObjectIdListObjectActionsSuspenseQueryError = ActionsActionGroupObjectIdListObjectActions400


export function useActionsActionGroupObjectIdListObjectActionsSuspense<TData = Awaited<ReturnType<typeof actionsActionGroupObjectIdListObjectActions>>, TError = ActionsActionGroupObjectIdListObjectActions400>(
 actionGroup: ActionGroupType,
    objectId: string, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof actionsActionGroupObjectIdListObjectActions>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useActionsActionGroupObjectIdListObjectActionsSuspense<TData = Awaited<ReturnType<typeof actionsActionGroupObjectIdListObjectActions>>, TError = ActionsActionGroupObjectIdListObjectActions400>(
 actionGroup: ActionGroupType,
    objectId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof actionsActionGroupObjectIdListObjectActions>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useActionsActionGroupObjectIdListObjectActionsSuspense<TData = Awaited<ReturnType<typeof actionsActionGroupObjectIdListObjectActions>>, TError = ActionsActionGroupObjectIdListObjectActions400>(
 actionGroup: ActionGroupType,
    objectId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof actionsActionGroupObjectIdListObjectActions>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ListObjectActions
 */

export function useActionsActionGroupObjectIdListObjectActionsSuspense<TData = Awaited<ReturnType<typeof actionsActionGroupObjectIdListObjectActions>>, TError = ActionsActionGroupObjectIdListObjectActions400>(
 actionGroup: ActionGroupType,
    objectId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof actionsActionGroupObjectIdListObjectActions>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getActionsActionGroupObjectIdListObjectActionsSuspenseQueryOptions(actionGroup,objectId,options)

  const query = useSuspenseQuery(queryOptions , queryClient) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary ExecuteObjectAction
 */
export const actionsActionGroupObjectIdExecuteObjectAction = (
    actionGroup: ActionGroupType,
    objectId: string,
    actionsActionGroupObjectIdExecuteObjectActionBody: ActionsActionGroupObjectIdExecuteObjectActionBody,
 signal?: AbortSignal
) => {
      
      
      return customInstance<ActionExecutionResponse>(
      {url: `/actions/${actionGroup}/${objectId}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: actionsActionGroupObjectIdExecuteObjectActionBody, signal
    },
      );
    }
  


export const getActionsActionGroupObjectIdExecuteObjectActionMutationOptions = <TError = ActionsActionGroupObjectIdExecuteObjectAction400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof actionsActionGroupObjectIdExecuteObjectAction>>, TError,{actionGroup: ActionGroupType;objectId: string;data: ActionsActionGroupObjectIdExecuteObjectActionBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof actionsActionGroupObjectIdExecuteObjectAction>>, TError,{actionGroup: ActionGroupType;objectId: string;data: ActionsActionGroupObjectIdExecuteObjectActionBody}, TContext> => {

const mutationKey = ['actionsActionGroupObjectIdExecuteObjectAction'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof actionsActionGroupObjectIdExecuteObjectAction>>, {actionGroup: ActionGroupType;objectId: string;data: ActionsActionGroupObjectIdExecuteObjectActionBody}> = (props) => {
          const {actionGroup,objectId,data} = props ?? {};

          return  actionsActionGroupObjectIdExecuteObjectAction(actionGroup,objectId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ActionsActionGroupObjectIdExecuteObjectActionMutationResult = NonNullable<Awaited<ReturnType<typeof actionsActionGroupObjectIdExecuteObjectAction>>>
    export type ActionsActionGroupObjectIdExecuteObjectActionMutationBody = ActionsActionGroupObjectIdExecuteObjectActionBody
    export type ActionsActionGroupObjectIdExecuteObjectActionMutationError = ActionsActionGroupObjectIdExecuteObjectAction400

    /**
 * @summary ExecuteObjectAction
 */
export const useActionsActionGroupObjectIdExecuteObjectAction = <TError = ActionsActionGroupObjectIdExecuteObjectAction400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof actionsActionGroupObjectIdExecuteObjectAction>>, TError,{actionGroup: ActionGroupType;objectId: string;data: ActionsActionGroupObjectIdExecuteObjectActionBody}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof actionsActionGroupObjectIdExecuteObjectAction>>,
        TError,
        {actionGroup: ActionGroupType;objectId: string;data: ActionsActionGroupObjectIdExecuteObjectActionBody},
        TContext
      > => {

      const mutationOptions = getActionsActionGroupObjectIdExecuteObjectActionMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    