/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * ManagerLab
 * Private schema of ManagerLab with Scalar OpenAPI docs
 * OpenAPI spec version: 0.0.1
 */
import {
  useMutation,
  useQuery,
  useSuspenseQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query';

import type {
  GetPostPostResponseBody,
  PostsIdGetPost400,
  PostsIdUpdatePost400,
  UpdatePostPostResponseBody
} from '../managerLab.schemas';

import { customInstance } from '.././custom-instance';




/**
 * @summary GetPost
 */
export const postsIdGetPost = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return customInstance<GetPostPostResponseBody>(
      {url: `/posts/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getPostsIdGetPostQueryKey = (id?: string,) => {
    return [`/posts/${id}`] as const;
    }

    
export const getPostsIdGetPostQueryOptions = <TData = Awaited<ReturnType<typeof postsIdGetPost>>, TError = PostsIdGetPost400>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof postsIdGetPost>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPostsIdGetPostQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof postsIdGetPost>>> = ({ signal }) => postsIdGetPost(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof postsIdGetPost>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PostsIdGetPostQueryResult = NonNullable<Awaited<ReturnType<typeof postsIdGetPost>>>
export type PostsIdGetPostQueryError = PostsIdGetPost400


export function usePostsIdGetPost<TData = Awaited<ReturnType<typeof postsIdGetPost>>, TError = PostsIdGetPost400>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof postsIdGetPost>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof postsIdGetPost>>,
          TError,
          Awaited<ReturnType<typeof postsIdGetPost>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePostsIdGetPost<TData = Awaited<ReturnType<typeof postsIdGetPost>>, TError = PostsIdGetPost400>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof postsIdGetPost>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof postsIdGetPost>>,
          TError,
          Awaited<ReturnType<typeof postsIdGetPost>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePostsIdGetPost<TData = Awaited<ReturnType<typeof postsIdGetPost>>, TError = PostsIdGetPost400>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof postsIdGetPost>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary GetPost
 */

export function usePostsIdGetPost<TData = Awaited<ReturnType<typeof postsIdGetPost>>, TError = PostsIdGetPost400>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof postsIdGetPost>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPostsIdGetPostQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getPostsIdGetPostSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof postsIdGetPost>>, TError = PostsIdGetPost400>(id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof postsIdGetPost>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPostsIdGetPostQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof postsIdGetPost>>> = ({ signal }) => postsIdGetPost(id, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof postsIdGetPost>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PostsIdGetPostSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof postsIdGetPost>>>
export type PostsIdGetPostSuspenseQueryError = PostsIdGetPost400


export function usePostsIdGetPostSuspense<TData = Awaited<ReturnType<typeof postsIdGetPost>>, TError = PostsIdGetPost400>(
 id: string, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof postsIdGetPost>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePostsIdGetPostSuspense<TData = Awaited<ReturnType<typeof postsIdGetPost>>, TError = PostsIdGetPost400>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof postsIdGetPost>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePostsIdGetPostSuspense<TData = Awaited<ReturnType<typeof postsIdGetPost>>, TError = PostsIdGetPost400>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof postsIdGetPost>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary GetPost
 */

export function usePostsIdGetPostSuspense<TData = Awaited<ReturnType<typeof postsIdGetPost>>, TError = PostsIdGetPost400>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof postsIdGetPost>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPostsIdGetPostSuspenseQueryOptions(id,options)

  const query = useSuspenseQuery(queryOptions , queryClient) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary UpdatePost
 */
export const postsIdUpdatePost = (
    id: string,
    postsIdUpdatePostBody: unknown,
 signal?: AbortSignal
) => {
      
      
      return customInstance<UpdatePostPostResponseBody>(
      {url: `/posts/${id}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postsIdUpdatePostBody, signal
    },
      );
    }
  


export const getPostsIdUpdatePostMutationOptions = <TError = PostsIdUpdatePost400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postsIdUpdatePost>>, TError,{id: string;data: unknown}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postsIdUpdatePost>>, TError,{id: string;data: unknown}, TContext> => {

const mutationKey = ['postsIdUpdatePost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postsIdUpdatePost>>, {id: string;data: unknown}> = (props) => {
          const {id,data} = props ?? {};

          return  postsIdUpdatePost(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostsIdUpdatePostMutationResult = NonNullable<Awaited<ReturnType<typeof postsIdUpdatePost>>>
    export type PostsIdUpdatePostMutationBody = unknown
    export type PostsIdUpdatePostMutationError = PostsIdUpdatePost400

    /**
 * @summary UpdatePost
 */
export const usePostsIdUpdatePost = <TError = PostsIdUpdatePost400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postsIdUpdatePost>>, TError,{id: string;data: unknown}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postsIdUpdatePost>>,
        TError,
        {id: string;data: unknown},
        TContext
      > => {

      const mutationOptions = getPostsIdUpdatePostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    