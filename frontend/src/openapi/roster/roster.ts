/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * ManagerLab
 * Private schema of ManagerLab with Scalar OpenAPI docs
 * OpenAPI spec version: 0.0.1
 */
import {
  useMutation,
  useQuery,
  useSuspenseQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query';

import type {
  RosterIdGetRoster400,
  RosterIdUpdateRoster400,
  RosterSchema,
  RosterUpdateSchema
} from '../managerLab.schemas';

import { customInstance } from '.././custom-instance';




/**
 * @summary GetRoster
 */
export const rosterIdGetRoster = (
    id: unknown,
 signal?: AbortSignal
) => {
      
      
      return customInstance<RosterSchema>(
      {url: `/roster/${id}`, method: 'GET', signal
    },
      );
    }
  



export const getRosterIdGetRosterQueryKey = (id?: unknown,) => {
    return [
    `/roster/${id}`
    ] as const;
    }

    
export const getRosterIdGetRosterQueryOptions = <TData = Awaited<ReturnType<typeof rosterIdGetRoster>>, TError = RosterIdGetRoster400>(id: unknown, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof rosterIdGetRoster>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getRosterIdGetRosterQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof rosterIdGetRoster>>> = ({ signal }) => rosterIdGetRoster(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof rosterIdGetRoster>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type RosterIdGetRosterQueryResult = NonNullable<Awaited<ReturnType<typeof rosterIdGetRoster>>>
export type RosterIdGetRosterQueryError = RosterIdGetRoster400


export function useRosterIdGetRoster<TData = Awaited<ReturnType<typeof rosterIdGetRoster>>, TError = RosterIdGetRoster400>(
 id: unknown, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof rosterIdGetRoster>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof rosterIdGetRoster>>,
          TError,
          Awaited<ReturnType<typeof rosterIdGetRoster>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useRosterIdGetRoster<TData = Awaited<ReturnType<typeof rosterIdGetRoster>>, TError = RosterIdGetRoster400>(
 id: unknown, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof rosterIdGetRoster>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof rosterIdGetRoster>>,
          TError,
          Awaited<ReturnType<typeof rosterIdGetRoster>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useRosterIdGetRoster<TData = Awaited<ReturnType<typeof rosterIdGetRoster>>, TError = RosterIdGetRoster400>(
 id: unknown, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof rosterIdGetRoster>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary GetRoster
 */

export function useRosterIdGetRoster<TData = Awaited<ReturnType<typeof rosterIdGetRoster>>, TError = RosterIdGetRoster400>(
 id: unknown, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof rosterIdGetRoster>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getRosterIdGetRosterQueryOptions(id,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getRosterIdGetRosterSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof rosterIdGetRoster>>, TError = RosterIdGetRoster400>(id: unknown, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof rosterIdGetRoster>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getRosterIdGetRosterQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof rosterIdGetRoster>>> = ({ signal }) => rosterIdGetRoster(id, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof rosterIdGetRoster>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type RosterIdGetRosterSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof rosterIdGetRoster>>>
export type RosterIdGetRosterSuspenseQueryError = RosterIdGetRoster400


export function useRosterIdGetRosterSuspense<TData = Awaited<ReturnType<typeof rosterIdGetRoster>>, TError = RosterIdGetRoster400>(
 id: unknown, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof rosterIdGetRoster>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useRosterIdGetRosterSuspense<TData = Awaited<ReturnType<typeof rosterIdGetRoster>>, TError = RosterIdGetRoster400>(
 id: unknown, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof rosterIdGetRoster>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useRosterIdGetRosterSuspense<TData = Awaited<ReturnType<typeof rosterIdGetRoster>>, TError = RosterIdGetRoster400>(
 id: unknown, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof rosterIdGetRoster>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary GetRoster
 */

export function useRosterIdGetRosterSuspense<TData = Awaited<ReturnType<typeof rosterIdGetRoster>>, TError = RosterIdGetRoster400>(
 id: unknown, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof rosterIdGetRoster>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getRosterIdGetRosterSuspenseQueryOptions(id,options)

  const query = useSuspenseQuery(queryOptions, queryClient) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary UpdateRoster
 */
export const rosterIdUpdateRoster = (
    id: unknown,
    rosterUpdateSchema: RosterUpdateSchema,
 signal?: AbortSignal
) => {
      
      
      return customInstance<RosterSchema>(
      {url: `/roster/${id}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: rosterUpdateSchema, signal
    },
      );
    }
  


export const getRosterIdUpdateRosterMutationOptions = <TError = RosterIdUpdateRoster400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof rosterIdUpdateRoster>>, TError,{id: unknown;data: RosterUpdateSchema}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof rosterIdUpdateRoster>>, TError,{id: unknown;data: RosterUpdateSchema}, TContext> => {

const mutationKey = ['rosterIdUpdateRoster'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof rosterIdUpdateRoster>>, {id: unknown;data: RosterUpdateSchema}> = (props) => {
          const {id,data} = props ?? {};

          return  rosterIdUpdateRoster(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RosterIdUpdateRosterMutationResult = NonNullable<Awaited<ReturnType<typeof rosterIdUpdateRoster>>>
    export type RosterIdUpdateRosterMutationBody = RosterUpdateSchema
    export type RosterIdUpdateRosterMutationError = RosterIdUpdateRoster400

    /**
 * @summary UpdateRoster
 */
export const useRosterIdUpdateRoster = <TError = RosterIdUpdateRoster400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof rosterIdUpdateRoster>>, TError,{id: unknown;data: RosterUpdateSchema}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof rosterIdUpdateRoster>>,
        TError,
        {id: unknown;data: RosterUpdateSchema},
        TContext
      > => {

      const mutationOptions = getRosterIdUpdateRosterMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    