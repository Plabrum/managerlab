/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * ManagerLab
 * Private schema of ManagerLab with Scalar OpenAPI docs
 * OpenAPI spec version: 0.0.1
 */
import {
  useMutation,
  useQuery,
  useSuspenseQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query';

import type {
  BatchUnreadRequest,
  BatchUnreadResponse,
  MessageCreateSchema,
  MessageListResponse,
  MessageSchema,
  ThreadsThreadableTypeBatchUnreadGetBatchThreadUnread400,
  ThreadsThreadableTypeBatchUnreadGetBatchThreadUnreadParams,
  ThreadsThreadableTypeThreadableIdMarkReadMarkThreadRead400,
  ThreadsThreadableTypeThreadableIdMarkReadMarkThreadReadParams,
  ThreadsThreadableTypeThreadableIdMessagesCreateMessage400,
  ThreadsThreadableTypeThreadableIdMessagesCreateMessageParams,
  ThreadsThreadableTypeThreadableIdMessagesListMessages400,
  ThreadsThreadableTypeThreadableIdMessagesListMessagesParams
} from '../managerLab.schemas';

import { customInstance } from '.././custom-instance';




/**
 * @summary ListMessages
 */
export const threadsThreadableTypeThreadableIdMessagesListMessages = (
    threadableType: string,
    threadableId: number,
    params?: ThreadsThreadableTypeThreadableIdMessagesListMessagesParams,
 signal?: AbortSignal
) => {
      
      
      return customInstance<MessageListResponse>(
      {url: `/threads/${threadableType}/${threadableId}/messages`, method: 'GET',
        params, signal
    },
      );
    }
  



export const getThreadsThreadableTypeThreadableIdMessagesListMessagesQueryKey = (threadableType?: string,
    threadableId?: number,
    params?: ThreadsThreadableTypeThreadableIdMessagesListMessagesParams,) => {
    return [
    `/threads/${threadableType}/${threadableId}/messages`, ...(params ? [params]: [])
    ] as const;
    }

    
export const getThreadsThreadableTypeThreadableIdMessagesListMessagesQueryOptions = <TData = Awaited<ReturnType<typeof threadsThreadableTypeThreadableIdMessagesListMessages>>, TError = ThreadsThreadableTypeThreadableIdMessagesListMessages400>(threadableType: string,
    threadableId: number,
    params?: ThreadsThreadableTypeThreadableIdMessagesListMessagesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof threadsThreadableTypeThreadableIdMessagesListMessages>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getThreadsThreadableTypeThreadableIdMessagesListMessagesQueryKey(threadableType,threadableId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof threadsThreadableTypeThreadableIdMessagesListMessages>>> = ({ signal }) => threadsThreadableTypeThreadableIdMessagesListMessages(threadableType,threadableId,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(threadableType && threadableId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof threadsThreadableTypeThreadableIdMessagesListMessages>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ThreadsThreadableTypeThreadableIdMessagesListMessagesQueryResult = NonNullable<Awaited<ReturnType<typeof threadsThreadableTypeThreadableIdMessagesListMessages>>>
export type ThreadsThreadableTypeThreadableIdMessagesListMessagesQueryError = ThreadsThreadableTypeThreadableIdMessagesListMessages400


export function useThreadsThreadableTypeThreadableIdMessagesListMessages<TData = Awaited<ReturnType<typeof threadsThreadableTypeThreadableIdMessagesListMessages>>, TError = ThreadsThreadableTypeThreadableIdMessagesListMessages400>(
 threadableType: string,
    threadableId: number,
    params: undefined |  ThreadsThreadableTypeThreadableIdMessagesListMessagesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof threadsThreadableTypeThreadableIdMessagesListMessages>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof threadsThreadableTypeThreadableIdMessagesListMessages>>,
          TError,
          Awaited<ReturnType<typeof threadsThreadableTypeThreadableIdMessagesListMessages>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useThreadsThreadableTypeThreadableIdMessagesListMessages<TData = Awaited<ReturnType<typeof threadsThreadableTypeThreadableIdMessagesListMessages>>, TError = ThreadsThreadableTypeThreadableIdMessagesListMessages400>(
 threadableType: string,
    threadableId: number,
    params?: ThreadsThreadableTypeThreadableIdMessagesListMessagesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof threadsThreadableTypeThreadableIdMessagesListMessages>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof threadsThreadableTypeThreadableIdMessagesListMessages>>,
          TError,
          Awaited<ReturnType<typeof threadsThreadableTypeThreadableIdMessagesListMessages>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useThreadsThreadableTypeThreadableIdMessagesListMessages<TData = Awaited<ReturnType<typeof threadsThreadableTypeThreadableIdMessagesListMessages>>, TError = ThreadsThreadableTypeThreadableIdMessagesListMessages400>(
 threadableType: string,
    threadableId: number,
    params?: ThreadsThreadableTypeThreadableIdMessagesListMessagesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof threadsThreadableTypeThreadableIdMessagesListMessages>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ListMessages
 */

export function useThreadsThreadableTypeThreadableIdMessagesListMessages<TData = Awaited<ReturnType<typeof threadsThreadableTypeThreadableIdMessagesListMessages>>, TError = ThreadsThreadableTypeThreadableIdMessagesListMessages400>(
 threadableType: string,
    threadableId: number,
    params?: ThreadsThreadableTypeThreadableIdMessagesListMessagesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof threadsThreadableTypeThreadableIdMessagesListMessages>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getThreadsThreadableTypeThreadableIdMessagesListMessagesQueryOptions(threadableType,threadableId,params,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getThreadsThreadableTypeThreadableIdMessagesListMessagesSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof threadsThreadableTypeThreadableIdMessagesListMessages>>, TError = ThreadsThreadableTypeThreadableIdMessagesListMessages400>(threadableType: string,
    threadableId: number,
    params?: ThreadsThreadableTypeThreadableIdMessagesListMessagesParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof threadsThreadableTypeThreadableIdMessagesListMessages>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getThreadsThreadableTypeThreadableIdMessagesListMessagesQueryKey(threadableType,threadableId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof threadsThreadableTypeThreadableIdMessagesListMessages>>> = ({ signal }) => threadsThreadableTypeThreadableIdMessagesListMessages(threadableType,threadableId,params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof threadsThreadableTypeThreadableIdMessagesListMessages>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ThreadsThreadableTypeThreadableIdMessagesListMessagesSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof threadsThreadableTypeThreadableIdMessagesListMessages>>>
export type ThreadsThreadableTypeThreadableIdMessagesListMessagesSuspenseQueryError = ThreadsThreadableTypeThreadableIdMessagesListMessages400


export function useThreadsThreadableTypeThreadableIdMessagesListMessagesSuspense<TData = Awaited<ReturnType<typeof threadsThreadableTypeThreadableIdMessagesListMessages>>, TError = ThreadsThreadableTypeThreadableIdMessagesListMessages400>(
 threadableType: string,
    threadableId: number,
    params: undefined |  ThreadsThreadableTypeThreadableIdMessagesListMessagesParams, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof threadsThreadableTypeThreadableIdMessagesListMessages>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useThreadsThreadableTypeThreadableIdMessagesListMessagesSuspense<TData = Awaited<ReturnType<typeof threadsThreadableTypeThreadableIdMessagesListMessages>>, TError = ThreadsThreadableTypeThreadableIdMessagesListMessages400>(
 threadableType: string,
    threadableId: number,
    params?: ThreadsThreadableTypeThreadableIdMessagesListMessagesParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof threadsThreadableTypeThreadableIdMessagesListMessages>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useThreadsThreadableTypeThreadableIdMessagesListMessagesSuspense<TData = Awaited<ReturnType<typeof threadsThreadableTypeThreadableIdMessagesListMessages>>, TError = ThreadsThreadableTypeThreadableIdMessagesListMessages400>(
 threadableType: string,
    threadableId: number,
    params?: ThreadsThreadableTypeThreadableIdMessagesListMessagesParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof threadsThreadableTypeThreadableIdMessagesListMessages>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ListMessages
 */

export function useThreadsThreadableTypeThreadableIdMessagesListMessagesSuspense<TData = Awaited<ReturnType<typeof threadsThreadableTypeThreadableIdMessagesListMessages>>, TError = ThreadsThreadableTypeThreadableIdMessagesListMessages400>(
 threadableType: string,
    threadableId: number,
    params?: ThreadsThreadableTypeThreadableIdMessagesListMessagesParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof threadsThreadableTypeThreadableIdMessagesListMessages>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getThreadsThreadableTypeThreadableIdMessagesListMessagesSuspenseQueryOptions(threadableType,threadableId,params,options)

  const query = useSuspenseQuery(queryOptions, queryClient) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary CreateMessage
 */
export const threadsThreadableTypeThreadableIdMessagesCreateMessage = (
    threadableType: string,
    threadableId: number,
    messageCreateSchema: MessageCreateSchema,
    params: ThreadsThreadableTypeThreadableIdMessagesCreateMessageParams,
 signal?: AbortSignal
) => {
      
      
      return customInstance<MessageSchema>(
      {url: `/threads/${threadableType}/${threadableId}/messages`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: messageCreateSchema,
        params, signal
    },
      );
    }
  


export const getThreadsThreadableTypeThreadableIdMessagesCreateMessageMutationOptions = <TError = ThreadsThreadableTypeThreadableIdMessagesCreateMessage400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof threadsThreadableTypeThreadableIdMessagesCreateMessage>>, TError,{threadableType: string;threadableId: number;data: MessageCreateSchema;params: ThreadsThreadableTypeThreadableIdMessagesCreateMessageParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof threadsThreadableTypeThreadableIdMessagesCreateMessage>>, TError,{threadableType: string;threadableId: number;data: MessageCreateSchema;params: ThreadsThreadableTypeThreadableIdMessagesCreateMessageParams}, TContext> => {

const mutationKey = ['threadsThreadableTypeThreadableIdMessagesCreateMessage'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof threadsThreadableTypeThreadableIdMessagesCreateMessage>>, {threadableType: string;threadableId: number;data: MessageCreateSchema;params: ThreadsThreadableTypeThreadableIdMessagesCreateMessageParams}> = (props) => {
          const {threadableType,threadableId,data,params} = props ?? {};

          return  threadsThreadableTypeThreadableIdMessagesCreateMessage(threadableType,threadableId,data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ThreadsThreadableTypeThreadableIdMessagesCreateMessageMutationResult = NonNullable<Awaited<ReturnType<typeof threadsThreadableTypeThreadableIdMessagesCreateMessage>>>
    export type ThreadsThreadableTypeThreadableIdMessagesCreateMessageMutationBody = MessageCreateSchema
    export type ThreadsThreadableTypeThreadableIdMessagesCreateMessageMutationError = ThreadsThreadableTypeThreadableIdMessagesCreateMessage400

    /**
 * @summary CreateMessage
 */
export const useThreadsThreadableTypeThreadableIdMessagesCreateMessage = <TError = ThreadsThreadableTypeThreadableIdMessagesCreateMessage400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof threadsThreadableTypeThreadableIdMessagesCreateMessage>>, TError,{threadableType: string;threadableId: number;data: MessageCreateSchema;params: ThreadsThreadableTypeThreadableIdMessagesCreateMessageParams}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof threadsThreadableTypeThreadableIdMessagesCreateMessage>>,
        TError,
        {threadableType: string;threadableId: number;data: MessageCreateSchema;params: ThreadsThreadableTypeThreadableIdMessagesCreateMessageParams},
        TContext
      > => {

      const mutationOptions = getThreadsThreadableTypeThreadableIdMessagesCreateMessageMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    /**
 * @summary GetBatchThreadUnread
 */
export const threadsThreadableTypeBatchUnreadGetBatchThreadUnread = (
    threadableType: string,
    batchUnreadRequest: BatchUnreadRequest,
    params: ThreadsThreadableTypeBatchUnreadGetBatchThreadUnreadParams,
 signal?: AbortSignal
) => {
      
      
      return customInstance<BatchUnreadResponse>(
      {url: `/threads/${threadableType}/batch-unread`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: batchUnreadRequest,
        params, signal
    },
      );
    }
  


export const getThreadsThreadableTypeBatchUnreadGetBatchThreadUnreadMutationOptions = <TError = ThreadsThreadableTypeBatchUnreadGetBatchThreadUnread400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof threadsThreadableTypeBatchUnreadGetBatchThreadUnread>>, TError,{threadableType: string;data: BatchUnreadRequest;params: ThreadsThreadableTypeBatchUnreadGetBatchThreadUnreadParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof threadsThreadableTypeBatchUnreadGetBatchThreadUnread>>, TError,{threadableType: string;data: BatchUnreadRequest;params: ThreadsThreadableTypeBatchUnreadGetBatchThreadUnreadParams}, TContext> => {

const mutationKey = ['threadsThreadableTypeBatchUnreadGetBatchThreadUnread'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof threadsThreadableTypeBatchUnreadGetBatchThreadUnread>>, {threadableType: string;data: BatchUnreadRequest;params: ThreadsThreadableTypeBatchUnreadGetBatchThreadUnreadParams}> = (props) => {
          const {threadableType,data,params} = props ?? {};

          return  threadsThreadableTypeBatchUnreadGetBatchThreadUnread(threadableType,data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ThreadsThreadableTypeBatchUnreadGetBatchThreadUnreadMutationResult = NonNullable<Awaited<ReturnType<typeof threadsThreadableTypeBatchUnreadGetBatchThreadUnread>>>
    export type ThreadsThreadableTypeBatchUnreadGetBatchThreadUnreadMutationBody = BatchUnreadRequest
    export type ThreadsThreadableTypeBatchUnreadGetBatchThreadUnreadMutationError = ThreadsThreadableTypeBatchUnreadGetBatchThreadUnread400

    /**
 * @summary GetBatchThreadUnread
 */
export const useThreadsThreadableTypeBatchUnreadGetBatchThreadUnread = <TError = ThreadsThreadableTypeBatchUnreadGetBatchThreadUnread400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof threadsThreadableTypeBatchUnreadGetBatchThreadUnread>>, TError,{threadableType: string;data: BatchUnreadRequest;params: ThreadsThreadableTypeBatchUnreadGetBatchThreadUnreadParams}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof threadsThreadableTypeBatchUnreadGetBatchThreadUnread>>,
        TError,
        {threadableType: string;data: BatchUnreadRequest;params: ThreadsThreadableTypeBatchUnreadGetBatchThreadUnreadParams},
        TContext
      > => {

      const mutationOptions = getThreadsThreadableTypeBatchUnreadGetBatchThreadUnreadMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    /**
 * @summary MarkThreadRead
 */
export const threadsThreadableTypeThreadableIdMarkReadMarkThreadRead = (
    threadableType: string,
    threadableId: number,
    params: ThreadsThreadableTypeThreadableIdMarkReadMarkThreadReadParams,
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/threads/${threadableType}/${threadableId}/mark-read`, method: 'POST',
        params, signal
    },
      );
    }
  


export const getThreadsThreadableTypeThreadableIdMarkReadMarkThreadReadMutationOptions = <TError = ThreadsThreadableTypeThreadableIdMarkReadMarkThreadRead400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof threadsThreadableTypeThreadableIdMarkReadMarkThreadRead>>, TError,{threadableType: string;threadableId: number;params: ThreadsThreadableTypeThreadableIdMarkReadMarkThreadReadParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof threadsThreadableTypeThreadableIdMarkReadMarkThreadRead>>, TError,{threadableType: string;threadableId: number;params: ThreadsThreadableTypeThreadableIdMarkReadMarkThreadReadParams}, TContext> => {

const mutationKey = ['threadsThreadableTypeThreadableIdMarkReadMarkThreadRead'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof threadsThreadableTypeThreadableIdMarkReadMarkThreadRead>>, {threadableType: string;threadableId: number;params: ThreadsThreadableTypeThreadableIdMarkReadMarkThreadReadParams}> = (props) => {
          const {threadableType,threadableId,params} = props ?? {};

          return  threadsThreadableTypeThreadableIdMarkReadMarkThreadRead(threadableType,threadableId,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ThreadsThreadableTypeThreadableIdMarkReadMarkThreadReadMutationResult = NonNullable<Awaited<ReturnType<typeof threadsThreadableTypeThreadableIdMarkReadMarkThreadRead>>>
    
    export type ThreadsThreadableTypeThreadableIdMarkReadMarkThreadReadMutationError = ThreadsThreadableTypeThreadableIdMarkReadMarkThreadRead400

    /**
 * @summary MarkThreadRead
 */
export const useThreadsThreadableTypeThreadableIdMarkReadMarkThreadRead = <TError = ThreadsThreadableTypeThreadableIdMarkReadMarkThreadRead400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof threadsThreadableTypeThreadableIdMarkReadMarkThreadRead>>, TError,{threadableType: string;threadableId: number;params: ThreadsThreadableTypeThreadableIdMarkReadMarkThreadReadParams}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof threadsThreadableTypeThreadableIdMarkReadMarkThreadRead>>,
        TError,
        {threadableType: string;threadableId: number;params: ThreadsThreadableTypeThreadableIdMarkReadMarkThreadReadParams},
        TContext
      > => {

      const mutationOptions = getThreadsThreadableTypeThreadableIdMarkReadMarkThreadReadMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    