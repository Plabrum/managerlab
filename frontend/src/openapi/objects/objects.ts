/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * ManagerLab
 * Private schema of ManagerLab with Scalar OpenAPI docs
 * OpenAPI spec version: 0.0.1
 */
import {
  useMutation,
  useQuery,
  useSuspenseQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query';

import type {
  GetTimeSeriesData400,
  ListObjects400,
  OObjectTypeIdGetObjectDetail400,
  OObjectTypeSchemaGetObjectSchema400,
  ObjectDetailDTO,
  ObjectListRequest,
  ObjectListResponse,
  ObjectSchemaResponse,
  ObjectTypes,
  TimeSeriesDataRequest,
  TimeSeriesDataResponse
} from '../managerLab.schemas';

import { customInstance } from '.././custom-instance';




/**
 * @summary GetObjectDetail
 */
export const oObjectTypeIdGetObjectDetail = (
    objectType: ObjectTypes,
    id: unknown,
 signal?: AbortSignal
) => {
      
      
      return customInstance<ObjectDetailDTO>(
      {url: `/o/${objectType}/${id}`, method: 'GET', signal
    },
      );
    }
  



export const getOObjectTypeIdGetObjectDetailQueryKey = (objectType?: ObjectTypes,
    id?: unknown,) => {
    return [
    `/o/${objectType}/${id}`
    ] as const;
    }

    
export const getOObjectTypeIdGetObjectDetailQueryOptions = <TData = Awaited<ReturnType<typeof oObjectTypeIdGetObjectDetail>>, TError = OObjectTypeIdGetObjectDetail400>(objectType: ObjectTypes,
    id: unknown, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof oObjectTypeIdGetObjectDetail>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getOObjectTypeIdGetObjectDetailQueryKey(objectType,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof oObjectTypeIdGetObjectDetail>>> = ({ signal }) => oObjectTypeIdGetObjectDetail(objectType,id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(objectType && id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof oObjectTypeIdGetObjectDetail>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type OObjectTypeIdGetObjectDetailQueryResult = NonNullable<Awaited<ReturnType<typeof oObjectTypeIdGetObjectDetail>>>
export type OObjectTypeIdGetObjectDetailQueryError = OObjectTypeIdGetObjectDetail400


export function useOObjectTypeIdGetObjectDetail<TData = Awaited<ReturnType<typeof oObjectTypeIdGetObjectDetail>>, TError = OObjectTypeIdGetObjectDetail400>(
 objectType: ObjectTypes,
    id: unknown, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof oObjectTypeIdGetObjectDetail>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof oObjectTypeIdGetObjectDetail>>,
          TError,
          Awaited<ReturnType<typeof oObjectTypeIdGetObjectDetail>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useOObjectTypeIdGetObjectDetail<TData = Awaited<ReturnType<typeof oObjectTypeIdGetObjectDetail>>, TError = OObjectTypeIdGetObjectDetail400>(
 objectType: ObjectTypes,
    id: unknown, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof oObjectTypeIdGetObjectDetail>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof oObjectTypeIdGetObjectDetail>>,
          TError,
          Awaited<ReturnType<typeof oObjectTypeIdGetObjectDetail>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useOObjectTypeIdGetObjectDetail<TData = Awaited<ReturnType<typeof oObjectTypeIdGetObjectDetail>>, TError = OObjectTypeIdGetObjectDetail400>(
 objectType: ObjectTypes,
    id: unknown, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof oObjectTypeIdGetObjectDetail>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary GetObjectDetail
 */

export function useOObjectTypeIdGetObjectDetail<TData = Awaited<ReturnType<typeof oObjectTypeIdGetObjectDetail>>, TError = OObjectTypeIdGetObjectDetail400>(
 objectType: ObjectTypes,
    id: unknown, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof oObjectTypeIdGetObjectDetail>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getOObjectTypeIdGetObjectDetailQueryOptions(objectType,id,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getOObjectTypeIdGetObjectDetailSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof oObjectTypeIdGetObjectDetail>>, TError = OObjectTypeIdGetObjectDetail400>(objectType: ObjectTypes,
    id: unknown, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof oObjectTypeIdGetObjectDetail>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getOObjectTypeIdGetObjectDetailQueryKey(objectType,id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof oObjectTypeIdGetObjectDetail>>> = ({ signal }) => oObjectTypeIdGetObjectDetail(objectType,id, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof oObjectTypeIdGetObjectDetail>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type OObjectTypeIdGetObjectDetailSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof oObjectTypeIdGetObjectDetail>>>
export type OObjectTypeIdGetObjectDetailSuspenseQueryError = OObjectTypeIdGetObjectDetail400


export function useOObjectTypeIdGetObjectDetailSuspense<TData = Awaited<ReturnType<typeof oObjectTypeIdGetObjectDetail>>, TError = OObjectTypeIdGetObjectDetail400>(
 objectType: ObjectTypes,
    id: unknown, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof oObjectTypeIdGetObjectDetail>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useOObjectTypeIdGetObjectDetailSuspense<TData = Awaited<ReturnType<typeof oObjectTypeIdGetObjectDetail>>, TError = OObjectTypeIdGetObjectDetail400>(
 objectType: ObjectTypes,
    id: unknown, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof oObjectTypeIdGetObjectDetail>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useOObjectTypeIdGetObjectDetailSuspense<TData = Awaited<ReturnType<typeof oObjectTypeIdGetObjectDetail>>, TError = OObjectTypeIdGetObjectDetail400>(
 objectType: ObjectTypes,
    id: unknown, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof oObjectTypeIdGetObjectDetail>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary GetObjectDetail
 */

export function useOObjectTypeIdGetObjectDetailSuspense<TData = Awaited<ReturnType<typeof oObjectTypeIdGetObjectDetail>>, TError = OObjectTypeIdGetObjectDetail400>(
 objectType: ObjectTypes,
    id: unknown, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof oObjectTypeIdGetObjectDetail>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getOObjectTypeIdGetObjectDetailSuspenseQueryOptions(objectType,id,options)

  const query = useSuspenseQuery(queryOptions, queryClient) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary GetObjectSchema
 */
export const oObjectTypeSchemaGetObjectSchema = (
    objectType: ObjectTypes,
 signal?: AbortSignal
) => {
      
      
      return customInstance<ObjectSchemaResponse>(
      {url: `/o/${objectType}/schema`, method: 'GET', signal
    },
      );
    }
  



export const getOObjectTypeSchemaGetObjectSchemaQueryKey = (objectType?: ObjectTypes,) => {
    return [
    `/o/${objectType}/schema`
    ] as const;
    }

    
export const getOObjectTypeSchemaGetObjectSchemaQueryOptions = <TData = Awaited<ReturnType<typeof oObjectTypeSchemaGetObjectSchema>>, TError = OObjectTypeSchemaGetObjectSchema400>(objectType: ObjectTypes, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof oObjectTypeSchemaGetObjectSchema>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getOObjectTypeSchemaGetObjectSchemaQueryKey(objectType);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof oObjectTypeSchemaGetObjectSchema>>> = ({ signal }) => oObjectTypeSchemaGetObjectSchema(objectType, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(objectType), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof oObjectTypeSchemaGetObjectSchema>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type OObjectTypeSchemaGetObjectSchemaQueryResult = NonNullable<Awaited<ReturnType<typeof oObjectTypeSchemaGetObjectSchema>>>
export type OObjectTypeSchemaGetObjectSchemaQueryError = OObjectTypeSchemaGetObjectSchema400


export function useOObjectTypeSchemaGetObjectSchema<TData = Awaited<ReturnType<typeof oObjectTypeSchemaGetObjectSchema>>, TError = OObjectTypeSchemaGetObjectSchema400>(
 objectType: ObjectTypes, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof oObjectTypeSchemaGetObjectSchema>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof oObjectTypeSchemaGetObjectSchema>>,
          TError,
          Awaited<ReturnType<typeof oObjectTypeSchemaGetObjectSchema>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useOObjectTypeSchemaGetObjectSchema<TData = Awaited<ReturnType<typeof oObjectTypeSchemaGetObjectSchema>>, TError = OObjectTypeSchemaGetObjectSchema400>(
 objectType: ObjectTypes, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof oObjectTypeSchemaGetObjectSchema>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof oObjectTypeSchemaGetObjectSchema>>,
          TError,
          Awaited<ReturnType<typeof oObjectTypeSchemaGetObjectSchema>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useOObjectTypeSchemaGetObjectSchema<TData = Awaited<ReturnType<typeof oObjectTypeSchemaGetObjectSchema>>, TError = OObjectTypeSchemaGetObjectSchema400>(
 objectType: ObjectTypes, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof oObjectTypeSchemaGetObjectSchema>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary GetObjectSchema
 */

export function useOObjectTypeSchemaGetObjectSchema<TData = Awaited<ReturnType<typeof oObjectTypeSchemaGetObjectSchema>>, TError = OObjectTypeSchemaGetObjectSchema400>(
 objectType: ObjectTypes, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof oObjectTypeSchemaGetObjectSchema>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getOObjectTypeSchemaGetObjectSchemaQueryOptions(objectType,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getOObjectTypeSchemaGetObjectSchemaSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof oObjectTypeSchemaGetObjectSchema>>, TError = OObjectTypeSchemaGetObjectSchema400>(objectType: ObjectTypes, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof oObjectTypeSchemaGetObjectSchema>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getOObjectTypeSchemaGetObjectSchemaQueryKey(objectType);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof oObjectTypeSchemaGetObjectSchema>>> = ({ signal }) => oObjectTypeSchemaGetObjectSchema(objectType, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof oObjectTypeSchemaGetObjectSchema>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type OObjectTypeSchemaGetObjectSchemaSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof oObjectTypeSchemaGetObjectSchema>>>
export type OObjectTypeSchemaGetObjectSchemaSuspenseQueryError = OObjectTypeSchemaGetObjectSchema400


export function useOObjectTypeSchemaGetObjectSchemaSuspense<TData = Awaited<ReturnType<typeof oObjectTypeSchemaGetObjectSchema>>, TError = OObjectTypeSchemaGetObjectSchema400>(
 objectType: ObjectTypes, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof oObjectTypeSchemaGetObjectSchema>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useOObjectTypeSchemaGetObjectSchemaSuspense<TData = Awaited<ReturnType<typeof oObjectTypeSchemaGetObjectSchema>>, TError = OObjectTypeSchemaGetObjectSchema400>(
 objectType: ObjectTypes, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof oObjectTypeSchemaGetObjectSchema>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useOObjectTypeSchemaGetObjectSchemaSuspense<TData = Awaited<ReturnType<typeof oObjectTypeSchemaGetObjectSchema>>, TError = OObjectTypeSchemaGetObjectSchema400>(
 objectType: ObjectTypes, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof oObjectTypeSchemaGetObjectSchema>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary GetObjectSchema
 */

export function useOObjectTypeSchemaGetObjectSchemaSuspense<TData = Awaited<ReturnType<typeof oObjectTypeSchemaGetObjectSchema>>, TError = OObjectTypeSchemaGetObjectSchema400>(
 objectType: ObjectTypes, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof oObjectTypeSchemaGetObjectSchema>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getOObjectTypeSchemaGetObjectSchemaSuspenseQueryOptions(objectType,options)

  const query = useSuspenseQuery(queryOptions, queryClient) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary ListObjects
 */
export const listObjects = (
    objectType: ObjectTypes,
    objectListRequest: ObjectListRequest,
 signal?: AbortSignal
) => {
      
      
      return customInstance<ObjectListResponse>(
      {url: `/o/${objectType}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: objectListRequest, signal
    },
      );
    }
  



export const getListObjectsQueryKey = (objectType?: ObjectTypes,
    objectListRequest?: ObjectListRequest,) => {
    return [
    `/o/${objectType}`, objectListRequest
    ] as const;
    }

    
export const getListObjectsQueryOptions = <TData = Awaited<ReturnType<typeof listObjects>>, TError = ListObjects400>(objectType: ObjectTypes,
    objectListRequest: ObjectListRequest, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listObjects>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListObjectsQueryKey(objectType,objectListRequest);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listObjects>>> = ({ signal }) => listObjects(objectType,objectListRequest, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(objectType), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof listObjects>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListObjectsQueryResult = NonNullable<Awaited<ReturnType<typeof listObjects>>>
export type ListObjectsQueryError = ListObjects400


export function useListObjects<TData = Awaited<ReturnType<typeof listObjects>>, TError = ListObjects400>(
 objectType: ObjectTypes,
    objectListRequest: ObjectListRequest, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof listObjects>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listObjects>>,
          TError,
          Awaited<ReturnType<typeof listObjects>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListObjects<TData = Awaited<ReturnType<typeof listObjects>>, TError = ListObjects400>(
 objectType: ObjectTypes,
    objectListRequest: ObjectListRequest, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listObjects>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listObjects>>,
          TError,
          Awaited<ReturnType<typeof listObjects>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListObjects<TData = Awaited<ReturnType<typeof listObjects>>, TError = ListObjects400>(
 objectType: ObjectTypes,
    objectListRequest: ObjectListRequest, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listObjects>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ListObjects
 */

export function useListObjects<TData = Awaited<ReturnType<typeof listObjects>>, TError = ListObjects400>(
 objectType: ObjectTypes,
    objectListRequest: ObjectListRequest, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listObjects>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getListObjectsQueryOptions(objectType,objectListRequest,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getListObjectsSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof listObjects>>, TError = ListObjects400>(objectType: ObjectTypes,
    objectListRequest: ObjectListRequest, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof listObjects>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListObjectsQueryKey(objectType,objectListRequest);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listObjects>>> = ({ signal }) => listObjects(objectType,objectListRequest, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof listObjects>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListObjectsSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof listObjects>>>
export type ListObjectsSuspenseQueryError = ListObjects400


export function useListObjectsSuspense<TData = Awaited<ReturnType<typeof listObjects>>, TError = ListObjects400>(
 objectType: ObjectTypes,
    objectListRequest: ObjectListRequest, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof listObjects>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListObjectsSuspense<TData = Awaited<ReturnType<typeof listObjects>>, TError = ListObjects400>(
 objectType: ObjectTypes,
    objectListRequest: ObjectListRequest, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof listObjects>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListObjectsSuspense<TData = Awaited<ReturnType<typeof listObjects>>, TError = ListObjects400>(
 objectType: ObjectTypes,
    objectListRequest: ObjectListRequest, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof listObjects>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ListObjects
 */

export function useListObjectsSuspense<TData = Awaited<ReturnType<typeof listObjects>>, TError = ListObjects400>(
 objectType: ObjectTypes,
    objectListRequest: ObjectListRequest, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof listObjects>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getListObjectsSuspenseQueryOptions(objectType,objectListRequest,options)

  const query = useSuspenseQuery(queryOptions, queryClient) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary GetTimeSeriesData
 */
export const getTimeSeriesData = (
    objectType: ObjectTypes,
    timeSeriesDataRequest: TimeSeriesDataRequest,
 signal?: AbortSignal
) => {
      
      
      return customInstance<TimeSeriesDataResponse>(
      {url: `/o/${objectType}/data`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: timeSeriesDataRequest, signal
    },
      );
    }
  


export const getGetTimeSeriesDataMutationOptions = <TError = GetTimeSeriesData400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getTimeSeriesData>>, TError,{objectType: ObjectTypes;data: TimeSeriesDataRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof getTimeSeriesData>>, TError,{objectType: ObjectTypes;data: TimeSeriesDataRequest}, TContext> => {

const mutationKey = ['getTimeSeriesData'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof getTimeSeriesData>>, {objectType: ObjectTypes;data: TimeSeriesDataRequest}> = (props) => {
          const {objectType,data} = props ?? {};

          return  getTimeSeriesData(objectType,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GetTimeSeriesDataMutationResult = NonNullable<Awaited<ReturnType<typeof getTimeSeriesData>>>
    export type GetTimeSeriesDataMutationBody = TimeSeriesDataRequest
    export type GetTimeSeriesDataMutationError = GetTimeSeriesData400

    /**
 * @summary GetTimeSeriesData
 */
export const useGetTimeSeriesData = <TError = GetTimeSeriesData400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getTimeSeriesData>>, TError,{objectType: ObjectTypes;data: TimeSeriesDataRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof getTimeSeriesData>>,
        TError,
        {objectType: ObjectTypes;data: TimeSeriesDataRequest},
        TContext
      > => {

      const mutationOptions = getGetTimeSeriesDataMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    