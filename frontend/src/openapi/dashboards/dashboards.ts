/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * ManagerLab
 * Private schema of ManagerLab with Scalar OpenAPI docs
 * OpenAPI spec version: 0.0.1
 */
import {
  useMutation,
  useQuery,
  useSuspenseQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query';

import type {
  CreateDashboardDashboardResponseBody,
  CreateDashboardSchema,
  DashboardsCreateDashboard400,
  DashboardsIdGetDashboard400,
  DashboardsIdUpdateDashboard400,
  GetDashboardDashboardResponseBody,
  ListDashboardsDashboardResponseBody,
  UpdateDashboardDashboardResponseBody,
  UpdateDashboardSchema
} from '../managerLab.schemas';

import { customInstance } from '.././custom-instance';




/**
 * @summary ListDashboards
 */
export const dashboardsListDashboards = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<ListDashboardsDashboardResponseBody[]>(
      {url: `/dashboards`, method: 'GET', signal
    },
      );
    }
  



export const getDashboardsListDashboardsQueryKey = () => {
    return [
    `/dashboards`
    ] as const;
    }

    
export const getDashboardsListDashboardsQueryOptions = <TData = Awaited<ReturnType<typeof dashboardsListDashboards>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dashboardsListDashboards>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDashboardsListDashboardsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof dashboardsListDashboards>>> = ({ signal }) => dashboardsListDashboards(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof dashboardsListDashboards>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DashboardsListDashboardsQueryResult = NonNullable<Awaited<ReturnType<typeof dashboardsListDashboards>>>
export type DashboardsListDashboardsQueryError = unknown


export function useDashboardsListDashboards<TData = Awaited<ReturnType<typeof dashboardsListDashboards>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof dashboardsListDashboards>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof dashboardsListDashboards>>,
          TError,
          Awaited<ReturnType<typeof dashboardsListDashboards>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDashboardsListDashboards<TData = Awaited<ReturnType<typeof dashboardsListDashboards>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dashboardsListDashboards>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof dashboardsListDashboards>>,
          TError,
          Awaited<ReturnType<typeof dashboardsListDashboards>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDashboardsListDashboards<TData = Awaited<ReturnType<typeof dashboardsListDashboards>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dashboardsListDashboards>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ListDashboards
 */

export function useDashboardsListDashboards<TData = Awaited<ReturnType<typeof dashboardsListDashboards>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dashboardsListDashboards>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getDashboardsListDashboardsQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getDashboardsListDashboardsSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof dashboardsListDashboards>>, TError = unknown>( options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof dashboardsListDashboards>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDashboardsListDashboardsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof dashboardsListDashboards>>> = ({ signal }) => dashboardsListDashboards(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof dashboardsListDashboards>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DashboardsListDashboardsSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof dashboardsListDashboards>>>
export type DashboardsListDashboardsSuspenseQueryError = unknown


export function useDashboardsListDashboardsSuspense<TData = Awaited<ReturnType<typeof dashboardsListDashboards>>, TError = unknown>(
  options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof dashboardsListDashboards>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDashboardsListDashboardsSuspense<TData = Awaited<ReturnType<typeof dashboardsListDashboards>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof dashboardsListDashboards>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDashboardsListDashboardsSuspense<TData = Awaited<ReturnType<typeof dashboardsListDashboards>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof dashboardsListDashboards>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ListDashboards
 */

export function useDashboardsListDashboardsSuspense<TData = Awaited<ReturnType<typeof dashboardsListDashboards>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof dashboardsListDashboards>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getDashboardsListDashboardsSuspenseQueryOptions(options)

  const query = useSuspenseQuery(queryOptions, queryClient) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary CreateDashboard
 */
export const dashboardsCreateDashboard = (
    createDashboardSchema: CreateDashboardSchema,
 signal?: AbortSignal
) => {
      
      
      return customInstance<CreateDashboardDashboardResponseBody>(
      {url: `/dashboards`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createDashboardSchema, signal
    },
      );
    }
  


export const getDashboardsCreateDashboardMutationOptions = <TError = DashboardsCreateDashboard400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof dashboardsCreateDashboard>>, TError,{data: CreateDashboardSchema}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof dashboardsCreateDashboard>>, TError,{data: CreateDashboardSchema}, TContext> => {

const mutationKey = ['dashboardsCreateDashboard'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof dashboardsCreateDashboard>>, {data: CreateDashboardSchema}> = (props) => {
          const {data} = props ?? {};

          return  dashboardsCreateDashboard(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DashboardsCreateDashboardMutationResult = NonNullable<Awaited<ReturnType<typeof dashboardsCreateDashboard>>>
    export type DashboardsCreateDashboardMutationBody = CreateDashboardSchema
    export type DashboardsCreateDashboardMutationError = DashboardsCreateDashboard400

    /**
 * @summary CreateDashboard
 */
export const useDashboardsCreateDashboard = <TError = DashboardsCreateDashboard400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof dashboardsCreateDashboard>>, TError,{data: CreateDashboardSchema}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof dashboardsCreateDashboard>>,
        TError,
        {data: CreateDashboardSchema},
        TContext
      > => {

      const mutationOptions = getDashboardsCreateDashboardMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    /**
 * @summary GetDashboard
 */
export const dashboardsIdGetDashboard = (
    id: unknown,
 signal?: AbortSignal
) => {
      
      
      return customInstance<GetDashboardDashboardResponseBody>(
      {url: `/dashboards/${id}`, method: 'GET', signal
    },
      );
    }
  



export const getDashboardsIdGetDashboardQueryKey = (id?: unknown,) => {
    return [
    `/dashboards/${id}`
    ] as const;
    }

    
export const getDashboardsIdGetDashboardQueryOptions = <TData = Awaited<ReturnType<typeof dashboardsIdGetDashboard>>, TError = DashboardsIdGetDashboard400>(id: unknown, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dashboardsIdGetDashboard>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDashboardsIdGetDashboardQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof dashboardsIdGetDashboard>>> = ({ signal }) => dashboardsIdGetDashboard(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof dashboardsIdGetDashboard>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DashboardsIdGetDashboardQueryResult = NonNullable<Awaited<ReturnType<typeof dashboardsIdGetDashboard>>>
export type DashboardsIdGetDashboardQueryError = DashboardsIdGetDashboard400


export function useDashboardsIdGetDashboard<TData = Awaited<ReturnType<typeof dashboardsIdGetDashboard>>, TError = DashboardsIdGetDashboard400>(
 id: unknown, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof dashboardsIdGetDashboard>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof dashboardsIdGetDashboard>>,
          TError,
          Awaited<ReturnType<typeof dashboardsIdGetDashboard>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDashboardsIdGetDashboard<TData = Awaited<ReturnType<typeof dashboardsIdGetDashboard>>, TError = DashboardsIdGetDashboard400>(
 id: unknown, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dashboardsIdGetDashboard>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof dashboardsIdGetDashboard>>,
          TError,
          Awaited<ReturnType<typeof dashboardsIdGetDashboard>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDashboardsIdGetDashboard<TData = Awaited<ReturnType<typeof dashboardsIdGetDashboard>>, TError = DashboardsIdGetDashboard400>(
 id: unknown, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dashboardsIdGetDashboard>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary GetDashboard
 */

export function useDashboardsIdGetDashboard<TData = Awaited<ReturnType<typeof dashboardsIdGetDashboard>>, TError = DashboardsIdGetDashboard400>(
 id: unknown, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dashboardsIdGetDashboard>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getDashboardsIdGetDashboardQueryOptions(id,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getDashboardsIdGetDashboardSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof dashboardsIdGetDashboard>>, TError = DashboardsIdGetDashboard400>(id: unknown, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof dashboardsIdGetDashboard>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDashboardsIdGetDashboardQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof dashboardsIdGetDashboard>>> = ({ signal }) => dashboardsIdGetDashboard(id, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof dashboardsIdGetDashboard>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DashboardsIdGetDashboardSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof dashboardsIdGetDashboard>>>
export type DashboardsIdGetDashboardSuspenseQueryError = DashboardsIdGetDashboard400


export function useDashboardsIdGetDashboardSuspense<TData = Awaited<ReturnType<typeof dashboardsIdGetDashboard>>, TError = DashboardsIdGetDashboard400>(
 id: unknown, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof dashboardsIdGetDashboard>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDashboardsIdGetDashboardSuspense<TData = Awaited<ReturnType<typeof dashboardsIdGetDashboard>>, TError = DashboardsIdGetDashboard400>(
 id: unknown, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof dashboardsIdGetDashboard>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDashboardsIdGetDashboardSuspense<TData = Awaited<ReturnType<typeof dashboardsIdGetDashboard>>, TError = DashboardsIdGetDashboard400>(
 id: unknown, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof dashboardsIdGetDashboard>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary GetDashboard
 */

export function useDashboardsIdGetDashboardSuspense<TData = Awaited<ReturnType<typeof dashboardsIdGetDashboard>>, TError = DashboardsIdGetDashboard400>(
 id: unknown, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof dashboardsIdGetDashboard>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getDashboardsIdGetDashboardSuspenseQueryOptions(id,options)

  const query = useSuspenseQuery(queryOptions, queryClient) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary UpdateDashboard
 */
export const dashboardsIdUpdateDashboard = (
    id: unknown,
    updateDashboardSchema: UpdateDashboardSchema,
 ) => {
      
      
      return customInstance<UpdateDashboardDashboardResponseBody>(
      {url: `/dashboards/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: updateDashboardSchema
    },
      );
    }
  


export const getDashboardsIdUpdateDashboardMutationOptions = <TError = DashboardsIdUpdateDashboard400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof dashboardsIdUpdateDashboard>>, TError,{id: unknown;data: UpdateDashboardSchema}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof dashboardsIdUpdateDashboard>>, TError,{id: unknown;data: UpdateDashboardSchema}, TContext> => {

const mutationKey = ['dashboardsIdUpdateDashboard'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof dashboardsIdUpdateDashboard>>, {id: unknown;data: UpdateDashboardSchema}> = (props) => {
          const {id,data} = props ?? {};

          return  dashboardsIdUpdateDashboard(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DashboardsIdUpdateDashboardMutationResult = NonNullable<Awaited<ReturnType<typeof dashboardsIdUpdateDashboard>>>
    export type DashboardsIdUpdateDashboardMutationBody = UpdateDashboardSchema
    export type DashboardsIdUpdateDashboardMutationError = DashboardsIdUpdateDashboard400

    /**
 * @summary UpdateDashboard
 */
export const useDashboardsIdUpdateDashboard = <TError = DashboardsIdUpdateDashboard400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof dashboardsIdUpdateDashboard>>, TError,{id: unknown;data: UpdateDashboardSchema}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof dashboardsIdUpdateDashboard>>,
        TError,
        {id: unknown;data: UpdateDashboardSchema},
        TContext
      > => {

      const mutationOptions = getDashboardsIdUpdateDashboardMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    