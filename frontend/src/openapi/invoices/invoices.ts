/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * ManagerLab
 * Private schema of ManagerLab with Scalar OpenAPI docs
 * OpenAPI spec version: 0.0.1
 */
import {
  useMutation,
  useQuery,
  useSuspenseQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query';

import type {
  GetInvoiceInvoiceResponseBody,
  InvoicesIdGetInvoice400,
  InvoicesIdUpdateInvoice400,
  UpdateInvoiceInvoiceResponseBody
} from '../managerLab.schemas';

import { customInstance } from '.././custom-instance';




/**
 * @summary GetInvoice
 */
export const invoicesIdGetInvoice = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return customInstance<GetInvoiceInvoiceResponseBody>(
      {url: `/invoices/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getInvoicesIdGetInvoiceQueryKey = (id?: string,) => {
    return [`/invoices/${id}`] as const;
    }

    
export const getInvoicesIdGetInvoiceQueryOptions = <TData = Awaited<ReturnType<typeof invoicesIdGetInvoice>>, TError = InvoicesIdGetInvoice400>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof invoicesIdGetInvoice>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getInvoicesIdGetInvoiceQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof invoicesIdGetInvoice>>> = ({ signal }) => invoicesIdGetInvoice(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof invoicesIdGetInvoice>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type InvoicesIdGetInvoiceQueryResult = NonNullable<Awaited<ReturnType<typeof invoicesIdGetInvoice>>>
export type InvoicesIdGetInvoiceQueryError = InvoicesIdGetInvoice400


export function useInvoicesIdGetInvoice<TData = Awaited<ReturnType<typeof invoicesIdGetInvoice>>, TError = InvoicesIdGetInvoice400>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof invoicesIdGetInvoice>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof invoicesIdGetInvoice>>,
          TError,
          Awaited<ReturnType<typeof invoicesIdGetInvoice>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useInvoicesIdGetInvoice<TData = Awaited<ReturnType<typeof invoicesIdGetInvoice>>, TError = InvoicesIdGetInvoice400>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof invoicesIdGetInvoice>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof invoicesIdGetInvoice>>,
          TError,
          Awaited<ReturnType<typeof invoicesIdGetInvoice>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useInvoicesIdGetInvoice<TData = Awaited<ReturnType<typeof invoicesIdGetInvoice>>, TError = InvoicesIdGetInvoice400>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof invoicesIdGetInvoice>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary GetInvoice
 */

export function useInvoicesIdGetInvoice<TData = Awaited<ReturnType<typeof invoicesIdGetInvoice>>, TError = InvoicesIdGetInvoice400>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof invoicesIdGetInvoice>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getInvoicesIdGetInvoiceQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getInvoicesIdGetInvoiceSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof invoicesIdGetInvoice>>, TError = InvoicesIdGetInvoice400>(id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof invoicesIdGetInvoice>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getInvoicesIdGetInvoiceQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof invoicesIdGetInvoice>>> = ({ signal }) => invoicesIdGetInvoice(id, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof invoicesIdGetInvoice>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type InvoicesIdGetInvoiceSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof invoicesIdGetInvoice>>>
export type InvoicesIdGetInvoiceSuspenseQueryError = InvoicesIdGetInvoice400


export function useInvoicesIdGetInvoiceSuspense<TData = Awaited<ReturnType<typeof invoicesIdGetInvoice>>, TError = InvoicesIdGetInvoice400>(
 id: string, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof invoicesIdGetInvoice>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useInvoicesIdGetInvoiceSuspense<TData = Awaited<ReturnType<typeof invoicesIdGetInvoice>>, TError = InvoicesIdGetInvoice400>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof invoicesIdGetInvoice>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useInvoicesIdGetInvoiceSuspense<TData = Awaited<ReturnType<typeof invoicesIdGetInvoice>>, TError = InvoicesIdGetInvoice400>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof invoicesIdGetInvoice>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary GetInvoice
 */

export function useInvoicesIdGetInvoiceSuspense<TData = Awaited<ReturnType<typeof invoicesIdGetInvoice>>, TError = InvoicesIdGetInvoice400>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof invoicesIdGetInvoice>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getInvoicesIdGetInvoiceSuspenseQueryOptions(id,options)

  const query = useSuspenseQuery(queryOptions , queryClient) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary UpdateInvoice
 */
export const invoicesIdUpdateInvoice = (
    id: string,
    invoicesIdUpdateInvoiceBody: unknown,
 signal?: AbortSignal
) => {
      
      
      return customInstance<UpdateInvoiceInvoiceResponseBody>(
      {url: `/invoices/${id}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: invoicesIdUpdateInvoiceBody, signal
    },
      );
    }
  


export const getInvoicesIdUpdateInvoiceMutationOptions = <TError = InvoicesIdUpdateInvoice400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof invoicesIdUpdateInvoice>>, TError,{id: string;data: unknown}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof invoicesIdUpdateInvoice>>, TError,{id: string;data: unknown}, TContext> => {

const mutationKey = ['invoicesIdUpdateInvoice'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof invoicesIdUpdateInvoice>>, {id: string;data: unknown}> = (props) => {
          const {id,data} = props ?? {};

          return  invoicesIdUpdateInvoice(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type InvoicesIdUpdateInvoiceMutationResult = NonNullable<Awaited<ReturnType<typeof invoicesIdUpdateInvoice>>>
    export type InvoicesIdUpdateInvoiceMutationBody = unknown
    export type InvoicesIdUpdateInvoiceMutationError = InvoicesIdUpdateInvoice400

    /**
 * @summary UpdateInvoice
 */
export const useInvoicesIdUpdateInvoice = <TError = InvoicesIdUpdateInvoice400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof invoicesIdUpdateInvoice>>, TError,{id: string;data: unknown}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof invoicesIdUpdateInvoice>>,
        TError,
        {id: string;data: unknown},
        TContext
      > => {

      const mutationOptions = getInvoicesIdUpdateInvoiceMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    