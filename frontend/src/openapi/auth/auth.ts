/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Litestar API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery,
  useSuspenseQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query';

import type {
  AuthGoogleCallbackGoogleCallback200,
  AuthGoogleCallbackGoogleCallback400,
  AuthGoogleCallbackGoogleCallbackParams,
  AuthGoogleLoginGoogleLogin200,
  GoogleUserInfoResponseSchema
} from '../litestarAPI.schemas';

import { customInstance } from '.././custom-instance';




/**
 * @summary LogoutUser
 */
export const authLogoutLogoutUser = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<null>(
      {url: `/auth/logout`, method: 'POST', signal
    },
      );
    }
  


export const getAuthLogoutLogoutUserMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authLogoutLogoutUser>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof authLogoutLogoutUser>>, TError,void, TContext> => {

const mutationKey = ['authLogoutLogoutUser'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authLogoutLogoutUser>>, void> = () => {
          

          return  authLogoutLogoutUser()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AuthLogoutLogoutUserMutationResult = NonNullable<Awaited<ReturnType<typeof authLogoutLogoutUser>>>
    
    export type AuthLogoutLogoutUserMutationError = unknown

    /**
 * @summary LogoutUser
 */
export const useAuthLogoutLogoutUser = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authLogoutLogoutUser>>, TError,void, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof authLogoutLogoutUser>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getAuthLogoutLogoutUserMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary GoogleLogin
 */
export const authGoogleLoginGoogleLogin = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<AuthGoogleLoginGoogleLogin200>(
      {url: `/auth/google/login`, method: 'GET', signal
    },
      );
    }
  

export const getAuthGoogleLoginGoogleLoginQueryKey = () => {
    return [`/auth/google/login`] as const;
    }

    
export const getAuthGoogleLoginGoogleLoginQueryOptions = <TData = Awaited<ReturnType<typeof authGoogleLoginGoogleLogin>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof authGoogleLoginGoogleLogin>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAuthGoogleLoginGoogleLoginQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof authGoogleLoginGoogleLogin>>> = ({ signal }) => authGoogleLoginGoogleLogin(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof authGoogleLoginGoogleLogin>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type AuthGoogleLoginGoogleLoginQueryResult = NonNullable<Awaited<ReturnType<typeof authGoogleLoginGoogleLogin>>>
export type AuthGoogleLoginGoogleLoginQueryError = unknown


export function useAuthGoogleLoginGoogleLogin<TData = Awaited<ReturnType<typeof authGoogleLoginGoogleLogin>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof authGoogleLoginGoogleLogin>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof authGoogleLoginGoogleLogin>>,
          TError,
          Awaited<ReturnType<typeof authGoogleLoginGoogleLogin>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAuthGoogleLoginGoogleLogin<TData = Awaited<ReturnType<typeof authGoogleLoginGoogleLogin>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof authGoogleLoginGoogleLogin>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof authGoogleLoginGoogleLogin>>,
          TError,
          Awaited<ReturnType<typeof authGoogleLoginGoogleLogin>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAuthGoogleLoginGoogleLogin<TData = Awaited<ReturnType<typeof authGoogleLoginGoogleLogin>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof authGoogleLoginGoogleLogin>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary GoogleLogin
 */

export function useAuthGoogleLoginGoogleLogin<TData = Awaited<ReturnType<typeof authGoogleLoginGoogleLogin>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof authGoogleLoginGoogleLogin>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getAuthGoogleLoginGoogleLoginQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getAuthGoogleLoginGoogleLoginSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof authGoogleLoginGoogleLogin>>, TError = unknown>( options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof authGoogleLoginGoogleLogin>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAuthGoogleLoginGoogleLoginQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof authGoogleLoginGoogleLogin>>> = ({ signal }) => authGoogleLoginGoogleLogin(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof authGoogleLoginGoogleLogin>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type AuthGoogleLoginGoogleLoginSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof authGoogleLoginGoogleLogin>>>
export type AuthGoogleLoginGoogleLoginSuspenseQueryError = unknown


export function useAuthGoogleLoginGoogleLoginSuspense<TData = Awaited<ReturnType<typeof authGoogleLoginGoogleLogin>>, TError = unknown>(
  options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof authGoogleLoginGoogleLogin>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAuthGoogleLoginGoogleLoginSuspense<TData = Awaited<ReturnType<typeof authGoogleLoginGoogleLogin>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof authGoogleLoginGoogleLogin>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAuthGoogleLoginGoogleLoginSuspense<TData = Awaited<ReturnType<typeof authGoogleLoginGoogleLogin>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof authGoogleLoginGoogleLogin>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary GoogleLogin
 */

export function useAuthGoogleLoginGoogleLoginSuspense<TData = Awaited<ReturnType<typeof authGoogleLoginGoogleLogin>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof authGoogleLoginGoogleLogin>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getAuthGoogleLoginGoogleLoginSuspenseQueryOptions(options)

  const query = useSuspenseQuery(queryOptions , queryClient) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary GoogleCallback
 */
export const authGoogleCallbackGoogleCallback = (
    params?: AuthGoogleCallbackGoogleCallbackParams,
 signal?: AbortSignal
) => {
      
      
      return customInstance<AuthGoogleCallbackGoogleCallback200>(
      {url: `/auth/google/callback`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getAuthGoogleCallbackGoogleCallbackQueryKey = (params?: AuthGoogleCallbackGoogleCallbackParams,) => {
    return [`/auth/google/callback`, ...(params ? [params]: [])] as const;
    }

    
export const getAuthGoogleCallbackGoogleCallbackQueryOptions = <TData = Awaited<ReturnType<typeof authGoogleCallbackGoogleCallback>>, TError = AuthGoogleCallbackGoogleCallback400>(params?: AuthGoogleCallbackGoogleCallbackParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof authGoogleCallbackGoogleCallback>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAuthGoogleCallbackGoogleCallbackQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof authGoogleCallbackGoogleCallback>>> = ({ signal }) => authGoogleCallbackGoogleCallback(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof authGoogleCallbackGoogleCallback>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type AuthGoogleCallbackGoogleCallbackQueryResult = NonNullable<Awaited<ReturnType<typeof authGoogleCallbackGoogleCallback>>>
export type AuthGoogleCallbackGoogleCallbackQueryError = AuthGoogleCallbackGoogleCallback400


export function useAuthGoogleCallbackGoogleCallback<TData = Awaited<ReturnType<typeof authGoogleCallbackGoogleCallback>>, TError = AuthGoogleCallbackGoogleCallback400>(
 params: undefined |  AuthGoogleCallbackGoogleCallbackParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof authGoogleCallbackGoogleCallback>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof authGoogleCallbackGoogleCallback>>,
          TError,
          Awaited<ReturnType<typeof authGoogleCallbackGoogleCallback>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAuthGoogleCallbackGoogleCallback<TData = Awaited<ReturnType<typeof authGoogleCallbackGoogleCallback>>, TError = AuthGoogleCallbackGoogleCallback400>(
 params?: AuthGoogleCallbackGoogleCallbackParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof authGoogleCallbackGoogleCallback>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof authGoogleCallbackGoogleCallback>>,
          TError,
          Awaited<ReturnType<typeof authGoogleCallbackGoogleCallback>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAuthGoogleCallbackGoogleCallback<TData = Awaited<ReturnType<typeof authGoogleCallbackGoogleCallback>>, TError = AuthGoogleCallbackGoogleCallback400>(
 params?: AuthGoogleCallbackGoogleCallbackParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof authGoogleCallbackGoogleCallback>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary GoogleCallback
 */

export function useAuthGoogleCallbackGoogleCallback<TData = Awaited<ReturnType<typeof authGoogleCallbackGoogleCallback>>, TError = AuthGoogleCallbackGoogleCallback400>(
 params?: AuthGoogleCallbackGoogleCallbackParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof authGoogleCallbackGoogleCallback>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getAuthGoogleCallbackGoogleCallbackQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getAuthGoogleCallbackGoogleCallbackSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof authGoogleCallbackGoogleCallback>>, TError = AuthGoogleCallbackGoogleCallback400>(params?: AuthGoogleCallbackGoogleCallbackParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof authGoogleCallbackGoogleCallback>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAuthGoogleCallbackGoogleCallbackQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof authGoogleCallbackGoogleCallback>>> = ({ signal }) => authGoogleCallbackGoogleCallback(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof authGoogleCallbackGoogleCallback>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type AuthGoogleCallbackGoogleCallbackSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof authGoogleCallbackGoogleCallback>>>
export type AuthGoogleCallbackGoogleCallbackSuspenseQueryError = AuthGoogleCallbackGoogleCallback400


export function useAuthGoogleCallbackGoogleCallbackSuspense<TData = Awaited<ReturnType<typeof authGoogleCallbackGoogleCallback>>, TError = AuthGoogleCallbackGoogleCallback400>(
 params: undefined |  AuthGoogleCallbackGoogleCallbackParams, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof authGoogleCallbackGoogleCallback>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAuthGoogleCallbackGoogleCallbackSuspense<TData = Awaited<ReturnType<typeof authGoogleCallbackGoogleCallback>>, TError = AuthGoogleCallbackGoogleCallback400>(
 params?: AuthGoogleCallbackGoogleCallbackParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof authGoogleCallbackGoogleCallback>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAuthGoogleCallbackGoogleCallbackSuspense<TData = Awaited<ReturnType<typeof authGoogleCallbackGoogleCallback>>, TError = AuthGoogleCallbackGoogleCallback400>(
 params?: AuthGoogleCallbackGoogleCallbackParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof authGoogleCallbackGoogleCallback>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary GoogleCallback
 */

export function useAuthGoogleCallbackGoogleCallbackSuspense<TData = Awaited<ReturnType<typeof authGoogleCallbackGoogleCallback>>, TError = AuthGoogleCallbackGoogleCallback400>(
 params?: AuthGoogleCallbackGoogleCallbackParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof authGoogleCallbackGoogleCallback>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getAuthGoogleCallbackGoogleCallbackSuspenseQueryOptions(params,options)

  const query = useSuspenseQuery(queryOptions , queryClient) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary GetCurrentUserGoogleInfo
 */
export const authGoogleMeGetCurrentUserGoogleInfo = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<GoogleUserInfoResponseSchema>(
      {url: `/auth/google/me`, method: 'GET', signal
    },
      );
    }
  

export const getAuthGoogleMeGetCurrentUserGoogleInfoQueryKey = () => {
    return [`/auth/google/me`] as const;
    }

    
export const getAuthGoogleMeGetCurrentUserGoogleInfoQueryOptions = <TData = Awaited<ReturnType<typeof authGoogleMeGetCurrentUserGoogleInfo>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof authGoogleMeGetCurrentUserGoogleInfo>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAuthGoogleMeGetCurrentUserGoogleInfoQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof authGoogleMeGetCurrentUserGoogleInfo>>> = ({ signal }) => authGoogleMeGetCurrentUserGoogleInfo(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof authGoogleMeGetCurrentUserGoogleInfo>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type AuthGoogleMeGetCurrentUserGoogleInfoQueryResult = NonNullable<Awaited<ReturnType<typeof authGoogleMeGetCurrentUserGoogleInfo>>>
export type AuthGoogleMeGetCurrentUserGoogleInfoQueryError = unknown


export function useAuthGoogleMeGetCurrentUserGoogleInfo<TData = Awaited<ReturnType<typeof authGoogleMeGetCurrentUserGoogleInfo>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof authGoogleMeGetCurrentUserGoogleInfo>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof authGoogleMeGetCurrentUserGoogleInfo>>,
          TError,
          Awaited<ReturnType<typeof authGoogleMeGetCurrentUserGoogleInfo>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAuthGoogleMeGetCurrentUserGoogleInfo<TData = Awaited<ReturnType<typeof authGoogleMeGetCurrentUserGoogleInfo>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof authGoogleMeGetCurrentUserGoogleInfo>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof authGoogleMeGetCurrentUserGoogleInfo>>,
          TError,
          Awaited<ReturnType<typeof authGoogleMeGetCurrentUserGoogleInfo>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAuthGoogleMeGetCurrentUserGoogleInfo<TData = Awaited<ReturnType<typeof authGoogleMeGetCurrentUserGoogleInfo>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof authGoogleMeGetCurrentUserGoogleInfo>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary GetCurrentUserGoogleInfo
 */

export function useAuthGoogleMeGetCurrentUserGoogleInfo<TData = Awaited<ReturnType<typeof authGoogleMeGetCurrentUserGoogleInfo>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof authGoogleMeGetCurrentUserGoogleInfo>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getAuthGoogleMeGetCurrentUserGoogleInfoQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getAuthGoogleMeGetCurrentUserGoogleInfoSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof authGoogleMeGetCurrentUserGoogleInfo>>, TError = unknown>( options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof authGoogleMeGetCurrentUserGoogleInfo>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAuthGoogleMeGetCurrentUserGoogleInfoQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof authGoogleMeGetCurrentUserGoogleInfo>>> = ({ signal }) => authGoogleMeGetCurrentUserGoogleInfo(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof authGoogleMeGetCurrentUserGoogleInfo>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type AuthGoogleMeGetCurrentUserGoogleInfoSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof authGoogleMeGetCurrentUserGoogleInfo>>>
export type AuthGoogleMeGetCurrentUserGoogleInfoSuspenseQueryError = unknown


export function useAuthGoogleMeGetCurrentUserGoogleInfoSuspense<TData = Awaited<ReturnType<typeof authGoogleMeGetCurrentUserGoogleInfo>>, TError = unknown>(
  options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof authGoogleMeGetCurrentUserGoogleInfo>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAuthGoogleMeGetCurrentUserGoogleInfoSuspense<TData = Awaited<ReturnType<typeof authGoogleMeGetCurrentUserGoogleInfo>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof authGoogleMeGetCurrentUserGoogleInfo>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAuthGoogleMeGetCurrentUserGoogleInfoSuspense<TData = Awaited<ReturnType<typeof authGoogleMeGetCurrentUserGoogleInfo>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof authGoogleMeGetCurrentUserGoogleInfo>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary GetCurrentUserGoogleInfo
 */

export function useAuthGoogleMeGetCurrentUserGoogleInfoSuspense<TData = Awaited<ReturnType<typeof authGoogleMeGetCurrentUserGoogleInfo>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof authGoogleMeGetCurrentUserGoogleInfo>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getAuthGoogleMeGetCurrentUserGoogleInfoSuspenseQueryOptions(options)

  const query = useSuspenseQuery(queryOptions , queryClient) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



