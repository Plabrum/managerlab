/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Litestar API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery,
  useSuspenseQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query';

import type {
  AuthAdminUsersUserIdDeleteUser200,
  AuthAdminUsersUserIdDeleteUser400,
  AuthGoogleCallbackGoogleCallback200,
  AuthGoogleCallbackGoogleCallback400,
  AuthGoogleCallbackGoogleCallbackParams,
  AuthGoogleLoginGoogleLogin200,
  AuthLogoutLogoutUser201,
  AuthLogoutLogoutUser400,
  AuthLogoutLogoutUserParams,
  AuthProfileGetUserProfile400,
  AuthProfileGetUserProfileParams,
  CurrentUserResponse,
  GoogleUserInfoResponseSchema
} from '../litestarAPI.schemas';

import { customInstance } from '.././custom-instance';




/**
 * @summary LogoutUser
 */
export const authLogoutLogoutUser = (
    params: AuthLogoutLogoutUserParams,
 signal?: AbortSignal
) => {
      
      
      return customInstance<AuthLogoutLogoutUser201>(
      {url: `/auth/logout`, method: 'POST',
        params, signal
    },
      );
    }
  


export const getAuthLogoutLogoutUserMutationOptions = <TError = AuthLogoutLogoutUser400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authLogoutLogoutUser>>, TError,{params: AuthLogoutLogoutUserParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof authLogoutLogoutUser>>, TError,{params: AuthLogoutLogoutUserParams}, TContext> => {

const mutationKey = ['authLogoutLogoutUser'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authLogoutLogoutUser>>, {params: AuthLogoutLogoutUserParams}> = (props) => {
          const {params} = props ?? {};

          return  authLogoutLogoutUser(params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AuthLogoutLogoutUserMutationResult = NonNullable<Awaited<ReturnType<typeof authLogoutLogoutUser>>>
    
    export type AuthLogoutLogoutUserMutationError = AuthLogoutLogoutUser400

    /**
 * @summary LogoutUser
 */
export const useAuthLogoutLogoutUser = <TError = AuthLogoutLogoutUser400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authLogoutLogoutUser>>, TError,{params: AuthLogoutLogoutUserParams}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof authLogoutLogoutUser>>,
        TError,
        {params: AuthLogoutLogoutUserParams},
        TContext
      > => {

      const mutationOptions = getAuthLogoutLogoutUserMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary GetUserProfile
 */
export const authProfileGetUserProfile = (
    params: AuthProfileGetUserProfileParams,
 signal?: AbortSignal
) => {
      
      
      return customInstance<CurrentUserResponse>(
      {url: `/auth/profile`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getAuthProfileGetUserProfileQueryKey = (params?: AuthProfileGetUserProfileParams,) => {
    return [`/auth/profile`, ...(params ? [params]: [])] as const;
    }

    
export const getAuthProfileGetUserProfileQueryOptions = <TData = Awaited<ReturnType<typeof authProfileGetUserProfile>>, TError = AuthProfileGetUserProfile400>(params: AuthProfileGetUserProfileParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof authProfileGetUserProfile>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAuthProfileGetUserProfileQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof authProfileGetUserProfile>>> = ({ signal }) => authProfileGetUserProfile(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof authProfileGetUserProfile>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type AuthProfileGetUserProfileQueryResult = NonNullable<Awaited<ReturnType<typeof authProfileGetUserProfile>>>
export type AuthProfileGetUserProfileQueryError = AuthProfileGetUserProfile400


export function useAuthProfileGetUserProfile<TData = Awaited<ReturnType<typeof authProfileGetUserProfile>>, TError = AuthProfileGetUserProfile400>(
 params: AuthProfileGetUserProfileParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof authProfileGetUserProfile>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof authProfileGetUserProfile>>,
          TError,
          Awaited<ReturnType<typeof authProfileGetUserProfile>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAuthProfileGetUserProfile<TData = Awaited<ReturnType<typeof authProfileGetUserProfile>>, TError = AuthProfileGetUserProfile400>(
 params: AuthProfileGetUserProfileParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof authProfileGetUserProfile>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof authProfileGetUserProfile>>,
          TError,
          Awaited<ReturnType<typeof authProfileGetUserProfile>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAuthProfileGetUserProfile<TData = Awaited<ReturnType<typeof authProfileGetUserProfile>>, TError = AuthProfileGetUserProfile400>(
 params: AuthProfileGetUserProfileParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof authProfileGetUserProfile>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary GetUserProfile
 */

export function useAuthProfileGetUserProfile<TData = Awaited<ReturnType<typeof authProfileGetUserProfile>>, TError = AuthProfileGetUserProfile400>(
 params: AuthProfileGetUserProfileParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof authProfileGetUserProfile>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getAuthProfileGetUserProfileQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getAuthProfileGetUserProfileSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof authProfileGetUserProfile>>, TError = AuthProfileGetUserProfile400>(params: AuthProfileGetUserProfileParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof authProfileGetUserProfile>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAuthProfileGetUserProfileQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof authProfileGetUserProfile>>> = ({ signal }) => authProfileGetUserProfile(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof authProfileGetUserProfile>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type AuthProfileGetUserProfileSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof authProfileGetUserProfile>>>
export type AuthProfileGetUserProfileSuspenseQueryError = AuthProfileGetUserProfile400


export function useAuthProfileGetUserProfileSuspense<TData = Awaited<ReturnType<typeof authProfileGetUserProfile>>, TError = AuthProfileGetUserProfile400>(
 params: AuthProfileGetUserProfileParams, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof authProfileGetUserProfile>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAuthProfileGetUserProfileSuspense<TData = Awaited<ReturnType<typeof authProfileGetUserProfile>>, TError = AuthProfileGetUserProfile400>(
 params: AuthProfileGetUserProfileParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof authProfileGetUserProfile>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAuthProfileGetUserProfileSuspense<TData = Awaited<ReturnType<typeof authProfileGetUserProfile>>, TError = AuthProfileGetUserProfile400>(
 params: AuthProfileGetUserProfileParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof authProfileGetUserProfile>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary GetUserProfile
 */

export function useAuthProfileGetUserProfileSuspense<TData = Awaited<ReturnType<typeof authProfileGetUserProfile>>, TError = AuthProfileGetUserProfile400>(
 params: AuthProfileGetUserProfileParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof authProfileGetUserProfile>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getAuthProfileGetUserProfileSuspenseQueryOptions(params,options)

  const query = useSuspenseQuery(queryOptions , queryClient) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary ListAllUsers
 */
export const authAdminUsersListAllUsers = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<CurrentUserResponse[]>(
      {url: `/auth/admin/users`, method: 'GET', signal
    },
      );
    }
  

export const getAuthAdminUsersListAllUsersQueryKey = () => {
    return [`/auth/admin/users`] as const;
    }

    
export const getAuthAdminUsersListAllUsersQueryOptions = <TData = Awaited<ReturnType<typeof authAdminUsersListAllUsers>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof authAdminUsersListAllUsers>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAuthAdminUsersListAllUsersQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof authAdminUsersListAllUsers>>> = ({ signal }) => authAdminUsersListAllUsers(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof authAdminUsersListAllUsers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type AuthAdminUsersListAllUsersQueryResult = NonNullable<Awaited<ReturnType<typeof authAdminUsersListAllUsers>>>
export type AuthAdminUsersListAllUsersQueryError = unknown


export function useAuthAdminUsersListAllUsers<TData = Awaited<ReturnType<typeof authAdminUsersListAllUsers>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof authAdminUsersListAllUsers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof authAdminUsersListAllUsers>>,
          TError,
          Awaited<ReturnType<typeof authAdminUsersListAllUsers>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAuthAdminUsersListAllUsers<TData = Awaited<ReturnType<typeof authAdminUsersListAllUsers>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof authAdminUsersListAllUsers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof authAdminUsersListAllUsers>>,
          TError,
          Awaited<ReturnType<typeof authAdminUsersListAllUsers>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAuthAdminUsersListAllUsers<TData = Awaited<ReturnType<typeof authAdminUsersListAllUsers>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof authAdminUsersListAllUsers>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ListAllUsers
 */

export function useAuthAdminUsersListAllUsers<TData = Awaited<ReturnType<typeof authAdminUsersListAllUsers>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof authAdminUsersListAllUsers>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getAuthAdminUsersListAllUsersQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getAuthAdminUsersListAllUsersSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof authAdminUsersListAllUsers>>, TError = unknown>( options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof authAdminUsersListAllUsers>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAuthAdminUsersListAllUsersQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof authAdminUsersListAllUsers>>> = ({ signal }) => authAdminUsersListAllUsers(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof authAdminUsersListAllUsers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type AuthAdminUsersListAllUsersSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof authAdminUsersListAllUsers>>>
export type AuthAdminUsersListAllUsersSuspenseQueryError = unknown


export function useAuthAdminUsersListAllUsersSuspense<TData = Awaited<ReturnType<typeof authAdminUsersListAllUsers>>, TError = unknown>(
  options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof authAdminUsersListAllUsers>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAuthAdminUsersListAllUsersSuspense<TData = Awaited<ReturnType<typeof authAdminUsersListAllUsers>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof authAdminUsersListAllUsers>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAuthAdminUsersListAllUsersSuspense<TData = Awaited<ReturnType<typeof authAdminUsersListAllUsers>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof authAdminUsersListAllUsers>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ListAllUsers
 */

export function useAuthAdminUsersListAllUsersSuspense<TData = Awaited<ReturnType<typeof authAdminUsersListAllUsers>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof authAdminUsersListAllUsers>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getAuthAdminUsersListAllUsersSuspenseQueryOptions(options)

  const query = useSuspenseQuery(queryOptions , queryClient) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary DeleteUser
 */
export const authAdminUsersUserIdDeleteUser = (
    userId: number,
 ) => {
      
      
      return customInstance<AuthAdminUsersUserIdDeleteUser200>(
      {url: `/auth/admin/users/${userId}`, method: 'DELETE'
    },
      );
    }
  


export const getAuthAdminUsersUserIdDeleteUserMutationOptions = <TError = AuthAdminUsersUserIdDeleteUser400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authAdminUsersUserIdDeleteUser>>, TError,{userId: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof authAdminUsersUserIdDeleteUser>>, TError,{userId: number}, TContext> => {

const mutationKey = ['authAdminUsersUserIdDeleteUser'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authAdminUsersUserIdDeleteUser>>, {userId: number}> = (props) => {
          const {userId} = props ?? {};

          return  authAdminUsersUserIdDeleteUser(userId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AuthAdminUsersUserIdDeleteUserMutationResult = NonNullable<Awaited<ReturnType<typeof authAdminUsersUserIdDeleteUser>>>
    
    export type AuthAdminUsersUserIdDeleteUserMutationError = AuthAdminUsersUserIdDeleteUser400

    /**
 * @summary DeleteUser
 */
export const useAuthAdminUsersUserIdDeleteUser = <TError = AuthAdminUsersUserIdDeleteUser400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authAdminUsersUserIdDeleteUser>>, TError,{userId: number}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof authAdminUsersUserIdDeleteUser>>,
        TError,
        {userId: number},
        TContext
      > => {

      const mutationOptions = getAuthAdminUsersUserIdDeleteUserMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary GoogleLogin
 */
export const authGoogleLoginGoogleLogin = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<AuthGoogleLoginGoogleLogin200>(
      {url: `/auth/google/login`, method: 'GET', signal
    },
      );
    }
  

export const getAuthGoogleLoginGoogleLoginQueryKey = () => {
    return [`/auth/google/login`] as const;
    }

    
export const getAuthGoogleLoginGoogleLoginQueryOptions = <TData = Awaited<ReturnType<typeof authGoogleLoginGoogleLogin>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof authGoogleLoginGoogleLogin>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAuthGoogleLoginGoogleLoginQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof authGoogleLoginGoogleLogin>>> = ({ signal }) => authGoogleLoginGoogleLogin(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof authGoogleLoginGoogleLogin>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type AuthGoogleLoginGoogleLoginQueryResult = NonNullable<Awaited<ReturnType<typeof authGoogleLoginGoogleLogin>>>
export type AuthGoogleLoginGoogleLoginQueryError = unknown


export function useAuthGoogleLoginGoogleLogin<TData = Awaited<ReturnType<typeof authGoogleLoginGoogleLogin>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof authGoogleLoginGoogleLogin>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof authGoogleLoginGoogleLogin>>,
          TError,
          Awaited<ReturnType<typeof authGoogleLoginGoogleLogin>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAuthGoogleLoginGoogleLogin<TData = Awaited<ReturnType<typeof authGoogleLoginGoogleLogin>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof authGoogleLoginGoogleLogin>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof authGoogleLoginGoogleLogin>>,
          TError,
          Awaited<ReturnType<typeof authGoogleLoginGoogleLogin>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAuthGoogleLoginGoogleLogin<TData = Awaited<ReturnType<typeof authGoogleLoginGoogleLogin>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof authGoogleLoginGoogleLogin>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary GoogleLogin
 */

export function useAuthGoogleLoginGoogleLogin<TData = Awaited<ReturnType<typeof authGoogleLoginGoogleLogin>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof authGoogleLoginGoogleLogin>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getAuthGoogleLoginGoogleLoginQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getAuthGoogleLoginGoogleLoginSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof authGoogleLoginGoogleLogin>>, TError = unknown>( options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof authGoogleLoginGoogleLogin>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAuthGoogleLoginGoogleLoginQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof authGoogleLoginGoogleLogin>>> = ({ signal }) => authGoogleLoginGoogleLogin(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof authGoogleLoginGoogleLogin>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type AuthGoogleLoginGoogleLoginSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof authGoogleLoginGoogleLogin>>>
export type AuthGoogleLoginGoogleLoginSuspenseQueryError = unknown


export function useAuthGoogleLoginGoogleLoginSuspense<TData = Awaited<ReturnType<typeof authGoogleLoginGoogleLogin>>, TError = unknown>(
  options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof authGoogleLoginGoogleLogin>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAuthGoogleLoginGoogleLoginSuspense<TData = Awaited<ReturnType<typeof authGoogleLoginGoogleLogin>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof authGoogleLoginGoogleLogin>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAuthGoogleLoginGoogleLoginSuspense<TData = Awaited<ReturnType<typeof authGoogleLoginGoogleLogin>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof authGoogleLoginGoogleLogin>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary GoogleLogin
 */

export function useAuthGoogleLoginGoogleLoginSuspense<TData = Awaited<ReturnType<typeof authGoogleLoginGoogleLogin>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof authGoogleLoginGoogleLogin>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getAuthGoogleLoginGoogleLoginSuspenseQueryOptions(options)

  const query = useSuspenseQuery(queryOptions , queryClient) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary GoogleCallback
 */
export const authGoogleCallbackGoogleCallback = (
    params?: AuthGoogleCallbackGoogleCallbackParams,
 signal?: AbortSignal
) => {
      
      
      return customInstance<AuthGoogleCallbackGoogleCallback200>(
      {url: `/auth/google/callback`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getAuthGoogleCallbackGoogleCallbackQueryKey = (params?: AuthGoogleCallbackGoogleCallbackParams,) => {
    return [`/auth/google/callback`, ...(params ? [params]: [])] as const;
    }

    
export const getAuthGoogleCallbackGoogleCallbackQueryOptions = <TData = Awaited<ReturnType<typeof authGoogleCallbackGoogleCallback>>, TError = AuthGoogleCallbackGoogleCallback400>(params?: AuthGoogleCallbackGoogleCallbackParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof authGoogleCallbackGoogleCallback>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAuthGoogleCallbackGoogleCallbackQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof authGoogleCallbackGoogleCallback>>> = ({ signal }) => authGoogleCallbackGoogleCallback(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof authGoogleCallbackGoogleCallback>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type AuthGoogleCallbackGoogleCallbackQueryResult = NonNullable<Awaited<ReturnType<typeof authGoogleCallbackGoogleCallback>>>
export type AuthGoogleCallbackGoogleCallbackQueryError = AuthGoogleCallbackGoogleCallback400


export function useAuthGoogleCallbackGoogleCallback<TData = Awaited<ReturnType<typeof authGoogleCallbackGoogleCallback>>, TError = AuthGoogleCallbackGoogleCallback400>(
 params: undefined |  AuthGoogleCallbackGoogleCallbackParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof authGoogleCallbackGoogleCallback>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof authGoogleCallbackGoogleCallback>>,
          TError,
          Awaited<ReturnType<typeof authGoogleCallbackGoogleCallback>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAuthGoogleCallbackGoogleCallback<TData = Awaited<ReturnType<typeof authGoogleCallbackGoogleCallback>>, TError = AuthGoogleCallbackGoogleCallback400>(
 params?: AuthGoogleCallbackGoogleCallbackParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof authGoogleCallbackGoogleCallback>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof authGoogleCallbackGoogleCallback>>,
          TError,
          Awaited<ReturnType<typeof authGoogleCallbackGoogleCallback>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAuthGoogleCallbackGoogleCallback<TData = Awaited<ReturnType<typeof authGoogleCallbackGoogleCallback>>, TError = AuthGoogleCallbackGoogleCallback400>(
 params?: AuthGoogleCallbackGoogleCallbackParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof authGoogleCallbackGoogleCallback>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary GoogleCallback
 */

export function useAuthGoogleCallbackGoogleCallback<TData = Awaited<ReturnType<typeof authGoogleCallbackGoogleCallback>>, TError = AuthGoogleCallbackGoogleCallback400>(
 params?: AuthGoogleCallbackGoogleCallbackParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof authGoogleCallbackGoogleCallback>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getAuthGoogleCallbackGoogleCallbackQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getAuthGoogleCallbackGoogleCallbackSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof authGoogleCallbackGoogleCallback>>, TError = AuthGoogleCallbackGoogleCallback400>(params?: AuthGoogleCallbackGoogleCallbackParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof authGoogleCallbackGoogleCallback>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAuthGoogleCallbackGoogleCallbackQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof authGoogleCallbackGoogleCallback>>> = ({ signal }) => authGoogleCallbackGoogleCallback(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof authGoogleCallbackGoogleCallback>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type AuthGoogleCallbackGoogleCallbackSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof authGoogleCallbackGoogleCallback>>>
export type AuthGoogleCallbackGoogleCallbackSuspenseQueryError = AuthGoogleCallbackGoogleCallback400


export function useAuthGoogleCallbackGoogleCallbackSuspense<TData = Awaited<ReturnType<typeof authGoogleCallbackGoogleCallback>>, TError = AuthGoogleCallbackGoogleCallback400>(
 params: undefined |  AuthGoogleCallbackGoogleCallbackParams, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof authGoogleCallbackGoogleCallback>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAuthGoogleCallbackGoogleCallbackSuspense<TData = Awaited<ReturnType<typeof authGoogleCallbackGoogleCallback>>, TError = AuthGoogleCallbackGoogleCallback400>(
 params?: AuthGoogleCallbackGoogleCallbackParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof authGoogleCallbackGoogleCallback>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAuthGoogleCallbackGoogleCallbackSuspense<TData = Awaited<ReturnType<typeof authGoogleCallbackGoogleCallback>>, TError = AuthGoogleCallbackGoogleCallback400>(
 params?: AuthGoogleCallbackGoogleCallbackParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof authGoogleCallbackGoogleCallback>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary GoogleCallback
 */

export function useAuthGoogleCallbackGoogleCallbackSuspense<TData = Awaited<ReturnType<typeof authGoogleCallbackGoogleCallback>>, TError = AuthGoogleCallbackGoogleCallback400>(
 params?: AuthGoogleCallbackGoogleCallbackParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof authGoogleCallbackGoogleCallback>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getAuthGoogleCallbackGoogleCallbackSuspenseQueryOptions(params,options)

  const query = useSuspenseQuery(queryOptions , queryClient) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary GetCurrentUserGoogleInfo
 */
export const authGoogleMeGetCurrentUserGoogleInfo = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<GoogleUserInfoResponseSchema>(
      {url: `/auth/google/me`, method: 'GET', signal
    },
      );
    }
  

export const getAuthGoogleMeGetCurrentUserGoogleInfoQueryKey = () => {
    return [`/auth/google/me`] as const;
    }

    
export const getAuthGoogleMeGetCurrentUserGoogleInfoQueryOptions = <TData = Awaited<ReturnType<typeof authGoogleMeGetCurrentUserGoogleInfo>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof authGoogleMeGetCurrentUserGoogleInfo>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAuthGoogleMeGetCurrentUserGoogleInfoQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof authGoogleMeGetCurrentUserGoogleInfo>>> = ({ signal }) => authGoogleMeGetCurrentUserGoogleInfo(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof authGoogleMeGetCurrentUserGoogleInfo>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type AuthGoogleMeGetCurrentUserGoogleInfoQueryResult = NonNullable<Awaited<ReturnType<typeof authGoogleMeGetCurrentUserGoogleInfo>>>
export type AuthGoogleMeGetCurrentUserGoogleInfoQueryError = unknown


export function useAuthGoogleMeGetCurrentUserGoogleInfo<TData = Awaited<ReturnType<typeof authGoogleMeGetCurrentUserGoogleInfo>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof authGoogleMeGetCurrentUserGoogleInfo>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof authGoogleMeGetCurrentUserGoogleInfo>>,
          TError,
          Awaited<ReturnType<typeof authGoogleMeGetCurrentUserGoogleInfo>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAuthGoogleMeGetCurrentUserGoogleInfo<TData = Awaited<ReturnType<typeof authGoogleMeGetCurrentUserGoogleInfo>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof authGoogleMeGetCurrentUserGoogleInfo>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof authGoogleMeGetCurrentUserGoogleInfo>>,
          TError,
          Awaited<ReturnType<typeof authGoogleMeGetCurrentUserGoogleInfo>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAuthGoogleMeGetCurrentUserGoogleInfo<TData = Awaited<ReturnType<typeof authGoogleMeGetCurrentUserGoogleInfo>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof authGoogleMeGetCurrentUserGoogleInfo>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary GetCurrentUserGoogleInfo
 */

export function useAuthGoogleMeGetCurrentUserGoogleInfo<TData = Awaited<ReturnType<typeof authGoogleMeGetCurrentUserGoogleInfo>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof authGoogleMeGetCurrentUserGoogleInfo>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getAuthGoogleMeGetCurrentUserGoogleInfoQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getAuthGoogleMeGetCurrentUserGoogleInfoSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof authGoogleMeGetCurrentUserGoogleInfo>>, TError = unknown>( options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof authGoogleMeGetCurrentUserGoogleInfo>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAuthGoogleMeGetCurrentUserGoogleInfoQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof authGoogleMeGetCurrentUserGoogleInfo>>> = ({ signal }) => authGoogleMeGetCurrentUserGoogleInfo(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof authGoogleMeGetCurrentUserGoogleInfo>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type AuthGoogleMeGetCurrentUserGoogleInfoSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof authGoogleMeGetCurrentUserGoogleInfo>>>
export type AuthGoogleMeGetCurrentUserGoogleInfoSuspenseQueryError = unknown


export function useAuthGoogleMeGetCurrentUserGoogleInfoSuspense<TData = Awaited<ReturnType<typeof authGoogleMeGetCurrentUserGoogleInfo>>, TError = unknown>(
  options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof authGoogleMeGetCurrentUserGoogleInfo>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAuthGoogleMeGetCurrentUserGoogleInfoSuspense<TData = Awaited<ReturnType<typeof authGoogleMeGetCurrentUserGoogleInfo>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof authGoogleMeGetCurrentUserGoogleInfo>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAuthGoogleMeGetCurrentUserGoogleInfoSuspense<TData = Awaited<ReturnType<typeof authGoogleMeGetCurrentUserGoogleInfo>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof authGoogleMeGetCurrentUserGoogleInfo>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary GetCurrentUserGoogleInfo
 */

export function useAuthGoogleMeGetCurrentUserGoogleInfoSuspense<TData = Awaited<ReturnType<typeof authGoogleMeGetCurrentUserGoogleInfo>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof authGoogleMeGetCurrentUserGoogleInfo>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getAuthGoogleMeGetCurrentUserGoogleInfoSuspenseQueryOptions(options)

  const query = useSuspenseQuery(queryOptions , queryClient) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



