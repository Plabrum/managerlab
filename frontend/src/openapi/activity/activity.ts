/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * ManagerLab
 * Private schema of ManagerLab with Scalar OpenAPI docs
 * OpenAPI spec version: 0.0.1
 */
import {
  useQuery,
  useSuspenseQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query';

import type {
  ActivityEventListResponse,
  ApiActivityListActivityEvents400,
  ApiActivityListActivityEventsParams,
  ApiActivityObjectTypeObjectIdGetObjectActivityTimeline400,
  ApiActivityObjectTypeObjectIdGetObjectActivityTimelineParams
} from '../managerLab.schemas';

import { customInstance } from '.././custom-instance';




/**
 * @summary ListActivityEvents
 */
export const apiActivityListActivityEvents = (
    params?: ApiActivityListActivityEventsParams,
 signal?: AbortSignal
) => {
      
      
      return customInstance<ActivityEventListResponse>(
      {url: `/api/activity`, method: 'GET',
        params, signal
    },
      );
    }
  



export const getApiActivityListActivityEventsQueryKey = (params?: ApiActivityListActivityEventsParams,) => {
    return [
    `/api/activity`, ...(params ? [params]: [])
    ] as const;
    }

    
export const getApiActivityListActivityEventsQueryOptions = <TData = Awaited<ReturnType<typeof apiActivityListActivityEvents>>, TError = ApiActivityListActivityEvents400>(params?: ApiActivityListActivityEventsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiActivityListActivityEvents>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiActivityListActivityEventsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiActivityListActivityEvents>>> = ({ signal }) => apiActivityListActivityEvents(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiActivityListActivityEvents>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ApiActivityListActivityEventsQueryResult = NonNullable<Awaited<ReturnType<typeof apiActivityListActivityEvents>>>
export type ApiActivityListActivityEventsQueryError = ApiActivityListActivityEvents400


export function useApiActivityListActivityEvents<TData = Awaited<ReturnType<typeof apiActivityListActivityEvents>>, TError = ApiActivityListActivityEvents400>(
 params: undefined |  ApiActivityListActivityEventsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiActivityListActivityEvents>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiActivityListActivityEvents>>,
          TError,
          Awaited<ReturnType<typeof apiActivityListActivityEvents>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiActivityListActivityEvents<TData = Awaited<ReturnType<typeof apiActivityListActivityEvents>>, TError = ApiActivityListActivityEvents400>(
 params?: ApiActivityListActivityEventsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiActivityListActivityEvents>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiActivityListActivityEvents>>,
          TError,
          Awaited<ReturnType<typeof apiActivityListActivityEvents>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiActivityListActivityEvents<TData = Awaited<ReturnType<typeof apiActivityListActivityEvents>>, TError = ApiActivityListActivityEvents400>(
 params?: ApiActivityListActivityEventsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiActivityListActivityEvents>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ListActivityEvents
 */

export function useApiActivityListActivityEvents<TData = Awaited<ReturnType<typeof apiActivityListActivityEvents>>, TError = ApiActivityListActivityEvents400>(
 params?: ApiActivityListActivityEventsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiActivityListActivityEvents>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getApiActivityListActivityEventsQueryOptions(params,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getApiActivityListActivityEventsSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof apiActivityListActivityEvents>>, TError = ApiActivityListActivityEvents400>(params?: ApiActivityListActivityEventsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof apiActivityListActivityEvents>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiActivityListActivityEventsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiActivityListActivityEvents>>> = ({ signal }) => apiActivityListActivityEvents(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof apiActivityListActivityEvents>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ApiActivityListActivityEventsSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof apiActivityListActivityEvents>>>
export type ApiActivityListActivityEventsSuspenseQueryError = ApiActivityListActivityEvents400


export function useApiActivityListActivityEventsSuspense<TData = Awaited<ReturnType<typeof apiActivityListActivityEvents>>, TError = ApiActivityListActivityEvents400>(
 params: undefined |  ApiActivityListActivityEventsParams, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof apiActivityListActivityEvents>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiActivityListActivityEventsSuspense<TData = Awaited<ReturnType<typeof apiActivityListActivityEvents>>, TError = ApiActivityListActivityEvents400>(
 params?: ApiActivityListActivityEventsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof apiActivityListActivityEvents>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiActivityListActivityEventsSuspense<TData = Awaited<ReturnType<typeof apiActivityListActivityEvents>>, TError = ApiActivityListActivityEvents400>(
 params?: ApiActivityListActivityEventsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof apiActivityListActivityEvents>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ListActivityEvents
 */

export function useApiActivityListActivityEventsSuspense<TData = Awaited<ReturnType<typeof apiActivityListActivityEvents>>, TError = ApiActivityListActivityEvents400>(
 params?: ApiActivityListActivityEventsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof apiActivityListActivityEvents>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getApiActivityListActivityEventsSuspenseQueryOptions(params,options)

  const query = useSuspenseQuery(queryOptions, queryClient) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary GetObjectActivityTimeline
 */
export const apiActivityObjectTypeObjectIdGetObjectActivityTimeline = (
    objectType: string,
    objectId: unknown,
    params?: ApiActivityObjectTypeObjectIdGetObjectActivityTimelineParams,
 signal?: AbortSignal
) => {
      
      
      return customInstance<ActivityEventListResponse>(
      {url: `/api/activity/${objectType}/${objectId}`, method: 'GET',
        params, signal
    },
      );
    }
  



export const getApiActivityObjectTypeObjectIdGetObjectActivityTimelineQueryKey = (objectType?: string,
    objectId?: unknown,
    params?: ApiActivityObjectTypeObjectIdGetObjectActivityTimelineParams,) => {
    return [
    `/api/activity/${objectType}/${objectId}`, ...(params ? [params]: [])
    ] as const;
    }

    
export const getApiActivityObjectTypeObjectIdGetObjectActivityTimelineQueryOptions = <TData = Awaited<ReturnType<typeof apiActivityObjectTypeObjectIdGetObjectActivityTimeline>>, TError = ApiActivityObjectTypeObjectIdGetObjectActivityTimeline400>(objectType: string,
    objectId: unknown,
    params?: ApiActivityObjectTypeObjectIdGetObjectActivityTimelineParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiActivityObjectTypeObjectIdGetObjectActivityTimeline>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiActivityObjectTypeObjectIdGetObjectActivityTimelineQueryKey(objectType,objectId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiActivityObjectTypeObjectIdGetObjectActivityTimeline>>> = ({ signal }) => apiActivityObjectTypeObjectIdGetObjectActivityTimeline(objectType,objectId,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(objectType && objectId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiActivityObjectTypeObjectIdGetObjectActivityTimeline>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ApiActivityObjectTypeObjectIdGetObjectActivityTimelineQueryResult = NonNullable<Awaited<ReturnType<typeof apiActivityObjectTypeObjectIdGetObjectActivityTimeline>>>
export type ApiActivityObjectTypeObjectIdGetObjectActivityTimelineQueryError = ApiActivityObjectTypeObjectIdGetObjectActivityTimeline400


export function useApiActivityObjectTypeObjectIdGetObjectActivityTimeline<TData = Awaited<ReturnType<typeof apiActivityObjectTypeObjectIdGetObjectActivityTimeline>>, TError = ApiActivityObjectTypeObjectIdGetObjectActivityTimeline400>(
 objectType: string,
    objectId: unknown,
    params: undefined |  ApiActivityObjectTypeObjectIdGetObjectActivityTimelineParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiActivityObjectTypeObjectIdGetObjectActivityTimeline>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiActivityObjectTypeObjectIdGetObjectActivityTimeline>>,
          TError,
          Awaited<ReturnType<typeof apiActivityObjectTypeObjectIdGetObjectActivityTimeline>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiActivityObjectTypeObjectIdGetObjectActivityTimeline<TData = Awaited<ReturnType<typeof apiActivityObjectTypeObjectIdGetObjectActivityTimeline>>, TError = ApiActivityObjectTypeObjectIdGetObjectActivityTimeline400>(
 objectType: string,
    objectId: unknown,
    params?: ApiActivityObjectTypeObjectIdGetObjectActivityTimelineParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiActivityObjectTypeObjectIdGetObjectActivityTimeline>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiActivityObjectTypeObjectIdGetObjectActivityTimeline>>,
          TError,
          Awaited<ReturnType<typeof apiActivityObjectTypeObjectIdGetObjectActivityTimeline>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiActivityObjectTypeObjectIdGetObjectActivityTimeline<TData = Awaited<ReturnType<typeof apiActivityObjectTypeObjectIdGetObjectActivityTimeline>>, TError = ApiActivityObjectTypeObjectIdGetObjectActivityTimeline400>(
 objectType: string,
    objectId: unknown,
    params?: ApiActivityObjectTypeObjectIdGetObjectActivityTimelineParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiActivityObjectTypeObjectIdGetObjectActivityTimeline>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary GetObjectActivityTimeline
 */

export function useApiActivityObjectTypeObjectIdGetObjectActivityTimeline<TData = Awaited<ReturnType<typeof apiActivityObjectTypeObjectIdGetObjectActivityTimeline>>, TError = ApiActivityObjectTypeObjectIdGetObjectActivityTimeline400>(
 objectType: string,
    objectId: unknown,
    params?: ApiActivityObjectTypeObjectIdGetObjectActivityTimelineParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiActivityObjectTypeObjectIdGetObjectActivityTimeline>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getApiActivityObjectTypeObjectIdGetObjectActivityTimelineQueryOptions(objectType,objectId,params,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getApiActivityObjectTypeObjectIdGetObjectActivityTimelineSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof apiActivityObjectTypeObjectIdGetObjectActivityTimeline>>, TError = ApiActivityObjectTypeObjectIdGetObjectActivityTimeline400>(objectType: string,
    objectId: unknown,
    params?: ApiActivityObjectTypeObjectIdGetObjectActivityTimelineParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof apiActivityObjectTypeObjectIdGetObjectActivityTimeline>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiActivityObjectTypeObjectIdGetObjectActivityTimelineQueryKey(objectType,objectId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiActivityObjectTypeObjectIdGetObjectActivityTimeline>>> = ({ signal }) => apiActivityObjectTypeObjectIdGetObjectActivityTimeline(objectType,objectId,params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof apiActivityObjectTypeObjectIdGetObjectActivityTimeline>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ApiActivityObjectTypeObjectIdGetObjectActivityTimelineSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof apiActivityObjectTypeObjectIdGetObjectActivityTimeline>>>
export type ApiActivityObjectTypeObjectIdGetObjectActivityTimelineSuspenseQueryError = ApiActivityObjectTypeObjectIdGetObjectActivityTimeline400


export function useApiActivityObjectTypeObjectIdGetObjectActivityTimelineSuspense<TData = Awaited<ReturnType<typeof apiActivityObjectTypeObjectIdGetObjectActivityTimeline>>, TError = ApiActivityObjectTypeObjectIdGetObjectActivityTimeline400>(
 objectType: string,
    objectId: unknown,
    params: undefined |  ApiActivityObjectTypeObjectIdGetObjectActivityTimelineParams, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof apiActivityObjectTypeObjectIdGetObjectActivityTimeline>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiActivityObjectTypeObjectIdGetObjectActivityTimelineSuspense<TData = Awaited<ReturnType<typeof apiActivityObjectTypeObjectIdGetObjectActivityTimeline>>, TError = ApiActivityObjectTypeObjectIdGetObjectActivityTimeline400>(
 objectType: string,
    objectId: unknown,
    params?: ApiActivityObjectTypeObjectIdGetObjectActivityTimelineParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof apiActivityObjectTypeObjectIdGetObjectActivityTimeline>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiActivityObjectTypeObjectIdGetObjectActivityTimelineSuspense<TData = Awaited<ReturnType<typeof apiActivityObjectTypeObjectIdGetObjectActivityTimeline>>, TError = ApiActivityObjectTypeObjectIdGetObjectActivityTimeline400>(
 objectType: string,
    objectId: unknown,
    params?: ApiActivityObjectTypeObjectIdGetObjectActivityTimelineParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof apiActivityObjectTypeObjectIdGetObjectActivityTimeline>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary GetObjectActivityTimeline
 */

export function useApiActivityObjectTypeObjectIdGetObjectActivityTimelineSuspense<TData = Awaited<ReturnType<typeof apiActivityObjectTypeObjectIdGetObjectActivityTimeline>>, TError = ApiActivityObjectTypeObjectIdGetObjectActivityTimeline400>(
 objectType: string,
    objectId: unknown,
    params?: ApiActivityObjectTypeObjectIdGetObjectActivityTimelineParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof apiActivityObjectTypeObjectIdGetObjectActivityTimeline>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getApiActivityObjectTypeObjectIdGetObjectActivityTimelineSuspenseQueryOptions(objectType,objectId,params,options)

  const query = useSuspenseQuery(queryOptions, queryClient) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



