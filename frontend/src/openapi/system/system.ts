/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Litestar API
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  ApiHealthCheck200
} from '../litestarAPI.schemas';





/**
 * @summary HealthCheck
 */
export const apiHealthCheck = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ApiHealthCheck200>> => {


  return axios.get(
    `/api`, options
  );
}


export const getApiHealthCheckQueryKey = () => {
  return [`/api`] as const;
}


export const getApiHealthCheckQueryOptions = <TData = Awaited<ReturnType<typeof apiHealthCheck>>, TError = AxiosError<unknown>>(options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof apiHealthCheck>>, TError, TData>, axios?: AxiosRequestConfig }
) => {

  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getApiHealthCheckQueryKey();



  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiHealthCheck>>> = ({ signal }) => apiHealthCheck({ signal, ...axiosOptions });





  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof apiHealthCheck>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiHealthCheckQueryResult = NonNullable<Awaited<ReturnType<typeof apiHealthCheck>>>
export type ApiHealthCheckQueryError = AxiosError<unknown>


/**
 * @summary HealthCheck
 */

export function useApiHealthCheck<TData = Awaited<ReturnType<typeof apiHealthCheck>>, TError = AxiosError<unknown>>(
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof apiHealthCheck>>, TError, TData>, axios?: AxiosRequestConfig }

): UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiHealthCheckQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}



