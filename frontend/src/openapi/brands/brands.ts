/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * ManagerLab
 * Private schema of ManagerLab with Scalar OpenAPI docs
 * OpenAPI spec version: 0.0.1
 */
import {
  useMutation,
  useQuery,
  useSuspenseQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query';

import type {
  BrandContactUpdateSchema,
  BrandUpdateSchema,
  BrandsContactsIdGetBrandContact400,
  BrandsContactsIdUpdateBrandContact400,
  BrandsIdGetBrand400,
  BrandsIdUpdateBrand400,
  GetBrandBrandResponseBody,
  GetBrandContactBrandContactResponseBody,
  UpdateBrandBrandResponseBody,
  UpdateBrandContactBrandContactResponseBody
} from '../managerLab.schemas';

import { customInstance } from '.././custom-instance';




/**
 * @summary GetBrand
 */
export const brandsIdGetBrand = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return customInstance<GetBrandBrandResponseBody>(
      {url: `/brands/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getBrandsIdGetBrandQueryKey = (id?: string,) => {
    return [`/brands/${id}`] as const;
    }

    
export const getBrandsIdGetBrandQueryOptions = <TData = Awaited<ReturnType<typeof brandsIdGetBrand>>, TError = BrandsIdGetBrand400>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof brandsIdGetBrand>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getBrandsIdGetBrandQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof brandsIdGetBrand>>> = ({ signal }) => brandsIdGetBrand(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof brandsIdGetBrand>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type BrandsIdGetBrandQueryResult = NonNullable<Awaited<ReturnType<typeof brandsIdGetBrand>>>
export type BrandsIdGetBrandQueryError = BrandsIdGetBrand400


export function useBrandsIdGetBrand<TData = Awaited<ReturnType<typeof brandsIdGetBrand>>, TError = BrandsIdGetBrand400>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof brandsIdGetBrand>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof brandsIdGetBrand>>,
          TError,
          Awaited<ReturnType<typeof brandsIdGetBrand>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useBrandsIdGetBrand<TData = Awaited<ReturnType<typeof brandsIdGetBrand>>, TError = BrandsIdGetBrand400>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof brandsIdGetBrand>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof brandsIdGetBrand>>,
          TError,
          Awaited<ReturnType<typeof brandsIdGetBrand>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useBrandsIdGetBrand<TData = Awaited<ReturnType<typeof brandsIdGetBrand>>, TError = BrandsIdGetBrand400>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof brandsIdGetBrand>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary GetBrand
 */

export function useBrandsIdGetBrand<TData = Awaited<ReturnType<typeof brandsIdGetBrand>>, TError = BrandsIdGetBrand400>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof brandsIdGetBrand>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getBrandsIdGetBrandQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getBrandsIdGetBrandSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof brandsIdGetBrand>>, TError = BrandsIdGetBrand400>(id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof brandsIdGetBrand>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getBrandsIdGetBrandQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof brandsIdGetBrand>>> = ({ signal }) => brandsIdGetBrand(id, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof brandsIdGetBrand>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type BrandsIdGetBrandSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof brandsIdGetBrand>>>
export type BrandsIdGetBrandSuspenseQueryError = BrandsIdGetBrand400


export function useBrandsIdGetBrandSuspense<TData = Awaited<ReturnType<typeof brandsIdGetBrand>>, TError = BrandsIdGetBrand400>(
 id: string, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof brandsIdGetBrand>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useBrandsIdGetBrandSuspense<TData = Awaited<ReturnType<typeof brandsIdGetBrand>>, TError = BrandsIdGetBrand400>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof brandsIdGetBrand>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useBrandsIdGetBrandSuspense<TData = Awaited<ReturnType<typeof brandsIdGetBrand>>, TError = BrandsIdGetBrand400>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof brandsIdGetBrand>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary GetBrand
 */

export function useBrandsIdGetBrandSuspense<TData = Awaited<ReturnType<typeof brandsIdGetBrand>>, TError = BrandsIdGetBrand400>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof brandsIdGetBrand>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getBrandsIdGetBrandSuspenseQueryOptions(id,options)

  const query = useSuspenseQuery(queryOptions , queryClient) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary UpdateBrand
 */
export const brandsIdUpdateBrand = (
    id: string,
    brandUpdateSchema: BrandUpdateSchema,
 signal?: AbortSignal
) => {
      
      
      return customInstance<UpdateBrandBrandResponseBody>(
      {url: `/brands/${id}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: brandUpdateSchema, signal
    },
      );
    }
  


export const getBrandsIdUpdateBrandMutationOptions = <TError = BrandsIdUpdateBrand400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof brandsIdUpdateBrand>>, TError,{id: string;data: BrandUpdateSchema}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof brandsIdUpdateBrand>>, TError,{id: string;data: BrandUpdateSchema}, TContext> => {

const mutationKey = ['brandsIdUpdateBrand'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof brandsIdUpdateBrand>>, {id: string;data: BrandUpdateSchema}> = (props) => {
          const {id,data} = props ?? {};

          return  brandsIdUpdateBrand(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type BrandsIdUpdateBrandMutationResult = NonNullable<Awaited<ReturnType<typeof brandsIdUpdateBrand>>>
    export type BrandsIdUpdateBrandMutationBody = BrandUpdateSchema
    export type BrandsIdUpdateBrandMutationError = BrandsIdUpdateBrand400

    /**
 * @summary UpdateBrand
 */
export const useBrandsIdUpdateBrand = <TError = BrandsIdUpdateBrand400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof brandsIdUpdateBrand>>, TError,{id: string;data: BrandUpdateSchema}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof brandsIdUpdateBrand>>,
        TError,
        {id: string;data: BrandUpdateSchema},
        TContext
      > => {

      const mutationOptions = getBrandsIdUpdateBrandMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary GetBrandContact
 */
export const brandsContactsIdGetBrandContact = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return customInstance<GetBrandContactBrandContactResponseBody>(
      {url: `/brands/contacts/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getBrandsContactsIdGetBrandContactQueryKey = (id?: string,) => {
    return [`/brands/contacts/${id}`] as const;
    }

    
export const getBrandsContactsIdGetBrandContactQueryOptions = <TData = Awaited<ReturnType<typeof brandsContactsIdGetBrandContact>>, TError = BrandsContactsIdGetBrandContact400>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof brandsContactsIdGetBrandContact>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getBrandsContactsIdGetBrandContactQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof brandsContactsIdGetBrandContact>>> = ({ signal }) => brandsContactsIdGetBrandContact(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof brandsContactsIdGetBrandContact>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type BrandsContactsIdGetBrandContactQueryResult = NonNullable<Awaited<ReturnType<typeof brandsContactsIdGetBrandContact>>>
export type BrandsContactsIdGetBrandContactQueryError = BrandsContactsIdGetBrandContact400


export function useBrandsContactsIdGetBrandContact<TData = Awaited<ReturnType<typeof brandsContactsIdGetBrandContact>>, TError = BrandsContactsIdGetBrandContact400>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof brandsContactsIdGetBrandContact>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof brandsContactsIdGetBrandContact>>,
          TError,
          Awaited<ReturnType<typeof brandsContactsIdGetBrandContact>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useBrandsContactsIdGetBrandContact<TData = Awaited<ReturnType<typeof brandsContactsIdGetBrandContact>>, TError = BrandsContactsIdGetBrandContact400>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof brandsContactsIdGetBrandContact>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof brandsContactsIdGetBrandContact>>,
          TError,
          Awaited<ReturnType<typeof brandsContactsIdGetBrandContact>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useBrandsContactsIdGetBrandContact<TData = Awaited<ReturnType<typeof brandsContactsIdGetBrandContact>>, TError = BrandsContactsIdGetBrandContact400>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof brandsContactsIdGetBrandContact>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary GetBrandContact
 */

export function useBrandsContactsIdGetBrandContact<TData = Awaited<ReturnType<typeof brandsContactsIdGetBrandContact>>, TError = BrandsContactsIdGetBrandContact400>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof brandsContactsIdGetBrandContact>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getBrandsContactsIdGetBrandContactQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getBrandsContactsIdGetBrandContactSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof brandsContactsIdGetBrandContact>>, TError = BrandsContactsIdGetBrandContact400>(id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof brandsContactsIdGetBrandContact>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getBrandsContactsIdGetBrandContactQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof brandsContactsIdGetBrandContact>>> = ({ signal }) => brandsContactsIdGetBrandContact(id, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof brandsContactsIdGetBrandContact>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type BrandsContactsIdGetBrandContactSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof brandsContactsIdGetBrandContact>>>
export type BrandsContactsIdGetBrandContactSuspenseQueryError = BrandsContactsIdGetBrandContact400


export function useBrandsContactsIdGetBrandContactSuspense<TData = Awaited<ReturnType<typeof brandsContactsIdGetBrandContact>>, TError = BrandsContactsIdGetBrandContact400>(
 id: string, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof brandsContactsIdGetBrandContact>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useBrandsContactsIdGetBrandContactSuspense<TData = Awaited<ReturnType<typeof brandsContactsIdGetBrandContact>>, TError = BrandsContactsIdGetBrandContact400>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof brandsContactsIdGetBrandContact>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useBrandsContactsIdGetBrandContactSuspense<TData = Awaited<ReturnType<typeof brandsContactsIdGetBrandContact>>, TError = BrandsContactsIdGetBrandContact400>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof brandsContactsIdGetBrandContact>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary GetBrandContact
 */

export function useBrandsContactsIdGetBrandContactSuspense<TData = Awaited<ReturnType<typeof brandsContactsIdGetBrandContact>>, TError = BrandsContactsIdGetBrandContact400>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof brandsContactsIdGetBrandContact>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getBrandsContactsIdGetBrandContactSuspenseQueryOptions(id,options)

  const query = useSuspenseQuery(queryOptions , queryClient) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary UpdateBrandContact
 */
export const brandsContactsIdUpdateBrandContact = (
    id: string,
    brandContactUpdateSchema: BrandContactUpdateSchema,
 signal?: AbortSignal
) => {
      
      
      return customInstance<UpdateBrandContactBrandContactResponseBody>(
      {url: `/brands/contacts/${id}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: brandContactUpdateSchema, signal
    },
      );
    }
  


export const getBrandsContactsIdUpdateBrandContactMutationOptions = <TError = BrandsContactsIdUpdateBrandContact400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof brandsContactsIdUpdateBrandContact>>, TError,{id: string;data: BrandContactUpdateSchema}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof brandsContactsIdUpdateBrandContact>>, TError,{id: string;data: BrandContactUpdateSchema}, TContext> => {

const mutationKey = ['brandsContactsIdUpdateBrandContact'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof brandsContactsIdUpdateBrandContact>>, {id: string;data: BrandContactUpdateSchema}> = (props) => {
          const {id,data} = props ?? {};

          return  brandsContactsIdUpdateBrandContact(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type BrandsContactsIdUpdateBrandContactMutationResult = NonNullable<Awaited<ReturnType<typeof brandsContactsIdUpdateBrandContact>>>
    export type BrandsContactsIdUpdateBrandContactMutationBody = BrandContactUpdateSchema
    export type BrandsContactsIdUpdateBrandContactMutationError = BrandsContactsIdUpdateBrandContact400

    /**
 * @summary UpdateBrandContact
 */
export const useBrandsContactsIdUpdateBrandContact = <TError = BrandsContactsIdUpdateBrandContact400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof brandsContactsIdUpdateBrandContact>>, TError,{id: string;data: BrandContactUpdateSchema}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof brandsContactsIdUpdateBrandContact>>,
        TError,
        {id: string;data: BrandContactUpdateSchema},
        TContext
      > => {

      const mutationOptions = getBrandsContactsIdUpdateBrandContactMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    