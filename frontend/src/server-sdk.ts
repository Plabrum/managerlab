/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Litestar API
 * OpenAPI spec version: 1.0.0
 */
import { serverMutator } from './server-mutator';
export type AddUserToWaitlistWaitlistEntryResponseBodyCompany = string | null;

export type AddUserToWaitlistWaitlistEntryResponseBodyMessage = string | null;

export interface AddUserToWaitlistWaitlistEntryResponseBody {
  name: string;
  email: string;
  company?: AddUserToWaitlistWaitlistEntryResponseBodyCompany;
  message?: AddUserToWaitlistWaitlistEntryResponseBodyMessage;
  id: number;
  created_at: string;
  updated_at: string;
}

export interface CreateUserSchema {
  name: string;
  email: string;
}

export interface CreateUserUserResponseBody {
  name: string;
  email: string;
  email_verified?: boolean;
  id: number;
  created_at: string;
  updated_at: string;
}

export interface GetCurrentUserUserResponseBody {
  name: string;
  email: string;
  email_verified?: boolean;
  id: number;
  created_at: string;
  updated_at: string;
}

export interface GetUserUserResponseBody {
  name: string;
  email: string;
  email_verified?: boolean;
  id: number;
  created_at: string;
  updated_at: string;
}

export type GoogleUserInfoResponseSchemaPicture = string | null;

export interface GoogleUserInfoResponseSchema {
  google_id: string;
  email: string;
  name: string;
  picture?: GoogleUserInfoResponseSchemaPicture;
  user_id: number;
}

export interface ListUsersUserResponseBody {
  name: string;
  email: string;
  email_verified?: boolean;
  id: number;
  created_at: string;
  updated_at: string;
}

export type UserWaitlistFormSchemaCompany = string | null;

export type UserWaitlistFormSchemaMessage = string | null;

export interface UserWaitlistFormSchema {
  name: string;
  email: string;
  company?: UserWaitlistFormSchemaCompany;
  message?: UserWaitlistFormSchemaMessage;
}

export type HealthHealthCheck200 = { [key: string]: unknown };

export type UsersSignupAddUserToWaitlist400ExtraAnyOf = {
  [key: string]: unknown;
};

export type UsersSignupAddUserToWaitlist400Extra =
  | null
  | UsersSignupAddUserToWaitlist400ExtraAnyOf
  | unknown[];

/**
 * Validation Exception
 */
export type UsersSignupAddUserToWaitlist400 = {
  status_code: number;
  detail: string;
  extra?: UsersSignupAddUserToWaitlist400Extra;
};

export type UsersCreateUser400ExtraAnyOf = { [key: string]: unknown };

export type UsersCreateUser400Extra =
  | null
  | UsersCreateUser400ExtraAnyOf
  | unknown[];

/**
 * Validation Exception
 */
export type UsersCreateUser400 = {
  status_code: number;
  detail: string;
  extra?: UsersCreateUser400Extra;
};

export type UsersUserIdGetUser400ExtraAnyOf = { [key: string]: unknown };

export type UsersUserIdGetUser400Extra =
  | null
  | UsersUserIdGetUser400ExtraAnyOf
  | unknown[];

/**
 * Validation Exception
 */
export type UsersUserIdGetUser400 = {
  status_code: number;
  detail: string;
  extra?: UsersUserIdGetUser400Extra;
};

export type AuthGoogleLoginGoogleLogin200 = { [key: string]: unknown };

export type AuthGoogleCallbackGoogleCallbackParams = {
  code?: string | null;
  state?: string | null;
  error?: string | null;
};

export type AuthGoogleCallbackGoogleCallback200 = { [key: string]: unknown };

export type AuthGoogleCallbackGoogleCallback400ExtraAnyOf = {
  [key: string]: unknown;
};

export type AuthGoogleCallbackGoogleCallback400Extra =
  | null
  | AuthGoogleCallbackGoogleCallback400ExtraAnyOf
  | unknown[];

/**
 * Validation Exception
 */
export type AuthGoogleCallbackGoogleCallback400 = {
  status_code: number;
  detail: string;
  extra?: AuthGoogleCallbackGoogleCallback400Extra;
};

/**
 * @summary HealthCheck
 */
export type healthHealthCheckResponse200 = {
  data: HealthHealthCheck200;
  status: 200;
};

export type healthHealthCheckResponseComposite = healthHealthCheckResponse200;

export type healthHealthCheckResponse = healthHealthCheckResponseComposite & {
  headers: Headers;
};

export const getHealthHealthCheckUrl = () => {
  return `/health`;
};

export const healthHealthCheck = async (
  options?: RequestInit
): Promise<healthHealthCheckResponse> => {
  return serverMutator<healthHealthCheckResponse>(getHealthHealthCheckUrl(), {
    ...options,
    method: 'GET',
  });
};

/**
 * @summary AddUserToWaitlist
 */
export type usersSignupAddUserToWaitlistResponse201 = {
  data: AddUserToWaitlistWaitlistEntryResponseBody;
  status: 201;
};

export type usersSignupAddUserToWaitlistResponse400 = {
  data: UsersSignupAddUserToWaitlist400;
  status: 400;
};

export type usersSignupAddUserToWaitlistResponseComposite =
  | usersSignupAddUserToWaitlistResponse201
  | usersSignupAddUserToWaitlistResponse400;

export type usersSignupAddUserToWaitlistResponse =
  usersSignupAddUserToWaitlistResponseComposite & {
    headers: Headers;
  };

export const getUsersSignupAddUserToWaitlistUrl = () => {
  return `/users/signup`;
};

export const usersSignupAddUserToWaitlist = async (
  userWaitlistFormSchema: UserWaitlistFormSchema,
  options?: RequestInit
): Promise<usersSignupAddUserToWaitlistResponse> => {
  return serverMutator<usersSignupAddUserToWaitlistResponse>(
    getUsersSignupAddUserToWaitlistUrl(),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(userWaitlistFormSchema),
    }
  );
};

/**
 * @summary ListUsers
 */
export type usersListUsersResponse200 = {
  data: ListUsersUserResponseBody[];
  status: 200;
};

export type usersListUsersResponseComposite = usersListUsersResponse200;

export type usersListUsersResponse = usersListUsersResponseComposite & {
  headers: Headers;
};

export const getUsersListUsersUrl = () => {
  return `/users`;
};

export const usersListUsers = async (
  options?: RequestInit
): Promise<usersListUsersResponse> => {
  return serverMutator<usersListUsersResponse>(getUsersListUsersUrl(), {
    ...options,
    method: 'GET',
  });
};

/**
 * @summary CreateUser
 */
export type usersCreateUserResponse201 = {
  data: CreateUserUserResponseBody;
  status: 201;
};

export type usersCreateUserResponse400 = {
  data: UsersCreateUser400;
  status: 400;
};

export type usersCreateUserResponseComposite =
  | usersCreateUserResponse201
  | usersCreateUserResponse400;

export type usersCreateUserResponse = usersCreateUserResponseComposite & {
  headers: Headers;
};

export const getUsersCreateUserUrl = () => {
  return `/users`;
};

export const usersCreateUser = async (
  createUserSchema: CreateUserSchema,
  options?: RequestInit
): Promise<usersCreateUserResponse> => {
  return serverMutator<usersCreateUserResponse>(getUsersCreateUserUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(createUserSchema),
  });
};

/**
 * @summary GetUser
 */
export type usersUserIdGetUserResponse200 = {
  data: GetUserUserResponseBody;
  status: 200;
};

export type usersUserIdGetUserResponse400 = {
  data: UsersUserIdGetUser400;
  status: 400;
};

export type usersUserIdGetUserResponseComposite =
  | usersUserIdGetUserResponse200
  | usersUserIdGetUserResponse400;

export type usersUserIdGetUserResponse = usersUserIdGetUserResponseComposite & {
  headers: Headers;
};

export const getUsersUserIdGetUserUrl = (userId: number) => {
  return `/users/${userId}`;
};

export const usersUserIdGetUser = async (
  userId: number,
  options?: RequestInit
): Promise<usersUserIdGetUserResponse> => {
  return serverMutator<usersUserIdGetUserResponse>(
    getUsersUserIdGetUserUrl(userId),
    {
      ...options,
      method: 'GET',
    }
  );
};

/**
 * @summary GetCurrentUser
 */
export type usersCurrentUserGetCurrentUserResponse200 = {
  data: GetCurrentUserUserResponseBody;
  status: 200;
};

export type usersCurrentUserGetCurrentUserResponseComposite =
  usersCurrentUserGetCurrentUserResponse200;

export type usersCurrentUserGetCurrentUserResponse =
  usersCurrentUserGetCurrentUserResponseComposite & {
    headers: Headers;
  };

export const getUsersCurrentUserGetCurrentUserUrl = () => {
  return `/users/current_user`;
};

export const usersCurrentUserGetCurrentUser = async (
  options?: RequestInit
): Promise<usersCurrentUserGetCurrentUserResponse> => {
  return serverMutator<usersCurrentUserGetCurrentUserResponse>(
    getUsersCurrentUserGetCurrentUserUrl(),
    {
      ...options,
      method: 'GET',
    }
  );
};

/**
 * @summary LogoutUser
 */
export type authLogoutLogoutUserResponse201 = {
  data: null;
  status: 201;
};

export type authLogoutLogoutUserResponseComposite =
  authLogoutLogoutUserResponse201;

export type authLogoutLogoutUserResponse =
  authLogoutLogoutUserResponseComposite & {
    headers: Headers;
  };

export const getAuthLogoutLogoutUserUrl = () => {
  return `/auth/logout`;
};

export const authLogoutLogoutUser = async (
  options?: RequestInit
): Promise<authLogoutLogoutUserResponse> => {
  return serverMutator<authLogoutLogoutUserResponse>(
    getAuthLogoutLogoutUserUrl(),
    {
      ...options,
      method: 'POST',
    }
  );
};

/**
 * @summary GoogleLogin
 */
export type authGoogleLoginGoogleLoginResponse200 = {
  data: AuthGoogleLoginGoogleLogin200;
  status: 200;
};

export type authGoogleLoginGoogleLoginResponseComposite =
  authGoogleLoginGoogleLoginResponse200;

export type authGoogleLoginGoogleLoginResponse =
  authGoogleLoginGoogleLoginResponseComposite & {
    headers: Headers;
  };

export const getAuthGoogleLoginGoogleLoginUrl = () => {
  return `/auth/google/login`;
};

export const authGoogleLoginGoogleLogin = async (
  options?: RequestInit
): Promise<authGoogleLoginGoogleLoginResponse> => {
  return serverMutator<authGoogleLoginGoogleLoginResponse>(
    getAuthGoogleLoginGoogleLoginUrl(),
    {
      ...options,
      method: 'GET',
    }
  );
};

/**
 * @summary GoogleCallback
 */
export type authGoogleCallbackGoogleCallbackResponse200 = {
  data: AuthGoogleCallbackGoogleCallback200;
  status: 200;
};

export type authGoogleCallbackGoogleCallbackResponse400 = {
  data: AuthGoogleCallbackGoogleCallback400;
  status: 400;
};

export type authGoogleCallbackGoogleCallbackResponseComposite =
  | authGoogleCallbackGoogleCallbackResponse200
  | authGoogleCallbackGoogleCallbackResponse400;

export type authGoogleCallbackGoogleCallbackResponse =
  authGoogleCallbackGoogleCallbackResponseComposite & {
    headers: Headers;
  };

export const getAuthGoogleCallbackGoogleCallbackUrl = (
  params?: AuthGoogleCallbackGoogleCallbackParams
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/auth/google/callback?${stringifiedParams}`
    : `/auth/google/callback`;
};

export const authGoogleCallbackGoogleCallback = async (
  params?: AuthGoogleCallbackGoogleCallbackParams,
  options?: RequestInit
): Promise<authGoogleCallbackGoogleCallbackResponse> => {
  return serverMutator<authGoogleCallbackGoogleCallbackResponse>(
    getAuthGoogleCallbackGoogleCallbackUrl(params),
    {
      ...options,
      method: 'GET',
    }
  );
};

/**
 * @summary GetCurrentUserGoogleInfo
 */
export type authGoogleMeGetCurrentUserGoogleInfoResponse200 = {
  data: GoogleUserInfoResponseSchema;
  status: 200;
};

export type authGoogleMeGetCurrentUserGoogleInfoResponseComposite =
  authGoogleMeGetCurrentUserGoogleInfoResponse200;

export type authGoogleMeGetCurrentUserGoogleInfoResponse =
  authGoogleMeGetCurrentUserGoogleInfoResponseComposite & {
    headers: Headers;
  };

export const getAuthGoogleMeGetCurrentUserGoogleInfoUrl = () => {
  return `/auth/google/me`;
};

export const authGoogleMeGetCurrentUserGoogleInfo = async (
  options?: RequestInit
): Promise<authGoogleMeGetCurrentUserGoogleInfoResponse> => {
  return serverMutator<authGoogleMeGetCurrentUserGoogleInfoResponse>(
    getAuthGoogleMeGetCurrentUserGoogleInfoUrl(),
    {
      ...options,
      method: 'GET',
    }
  );
};
